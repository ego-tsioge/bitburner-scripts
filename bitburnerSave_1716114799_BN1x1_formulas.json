{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":245,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":1128964.0390566962,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"hacking_exp\":1,\"strength\":1,\"strength_exp\":1,\"defense\":1,\"defense_exp\":1,\"dexterity\":1,\"dexterity_exp\":1,\"agility\":1,\"agility_exp\":1,\"charisma\":1,\"charisma_exp\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"company_rep\":1,\"faction_rep\":1,\"work_money\":1,\"crime_success\":1,\"crime_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[],\"factionInvitations\":[\"Sector-12\",\"Aevum\"],\"factionRumors\":{\"ctor\":\"JSONSet\",\"data\":[\"CyberSec\",\"NiteSec\"]},\"hacknetNodes\":[],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":0,\"numPeopleKilled\":0,\"location\":\"Travel Agency\",\"money\":5308819276.1214285,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":10099999975.5,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"gang_expenses\":0,\"hacking\":624101939.9667753,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":5308818125.1214285,\"work\":0,\"servers\":-100683790.34535334,\"other\":-5314600000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":13199999979,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"gang_expenses\":0,\"hacking\":5919121747.594771,\"hacknet\":20473237.156659126,\"hacknet_expenses\":-344414.3474669878,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":8321721367.3975725,\"work\":0,\"servers\":-146829182.23116505,\"other\":-10670700000,\"augmentations\":0}},\"playtimeSinceLastAug\":223229400,\"playtimeSinceLastBitnode\":832866200,\"lastAugReset\":1715891562564,\"lastNodeReset\":-1,\"purchasedServers\":[],\"scriptProdSinceLastAug\":382460729.35462993,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"exploits\":[],\"achievements\":[{\"ID\":\"FROZE\",\"unlockedOn\":1715281933083},{\"ID\":\"NS2\",\"unlockedOn\":1715281993075},{\"ID\":\"TOR\",\"unlockedOn\":1715282833067},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1715285113061},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1715285113063},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1715285113065},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1715285533061},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1715289493062},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1715350753066},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1715431153061},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1715455093062},{\"ID\":\"TRAVEL\",\"unlockedOn\":1715455154027},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1715455475880},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1715455506684},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1715785215258},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1715915940413}],\"terminalCommandHistory\":[\"buy relaySMTP.exe \",\"buy HTTPWorm.exe \",\"buy SQLInject.exe \",\"run basis.js --neustart\",\"nano setSomething.js\",\"run setSomething.js \",\"run mon.js foodnstuff  \",\"run basis.js --neustart\",\"ls\",\"run killAll.js \",\"run basis.js --neustart\",\"run killAll.js \",\"run basis.js --neustart\",\"run killAll.js \",\"run basis.js --neustart\",\"ls\",\"run killAll.js \",\"ls\",\"nano buttons.js\",\"run buttons.js \",\"run casino.js \",\"buy -a\",\"do ns.formulas()\",\"do ns.formulas\",\"do ns.formulas.reputation\",\"do ns.formulas.skill\",\"do ns.formulas.hacking\",\"do ns.formulas.hacking()\",\"do ns.formulas.hackingls\",\"ls\",\"run testHackCalc.js \",\"clear\",\"run testHackCalc.js \",\"clear\",\"run testHackCalc.js \",\"run mon.js n00dles \",\"ls\",\"run testHackCalc.js \",\"connect foodnstuff \",\"hack \",\"grow\",\"weaken \",\"home\",\"run testHackCalc.js \",\"ns.formulas.hacking.hackPercent(ns.getServer('foodnstuff').hackDifficulty = 10, ns.getPlayer())\",\"do ns.formulas.hacking.hackPercent(ns.getServer('foodnstuff').hackDifficulty = 10, ns.getPlayer())\",\"do let s=ns.getServer('foodnstuff');s.hackDifficulty = 10;ns.formulas.hacking.hackPercent(s, ns.getPlayer());\",\"run testHackCalc.js \",\"ls\",\"download *\"],\"lastUpdate\":1716114799205,\"lastSave\":1716114791618,\"totalPlaytime\":832866200,\"currentWork\":null,\"focus\":false,\"entropy\":0,\"identifier\":\"1f8a7a759e01cb\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"87.4.5.7\",\"isConnectedTo\":true,\"maxRam\":256,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"DeepscanV1.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\",\"Formulas.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"git-init.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// https://github.com/alainbryden/bitburner-scripts/blob/main/git-pull.js\\n\\nlet options;\\nconst argsSchema = [\\n    ['github', 'ego-tsioge'],\\n    ['repository', 'bitburner-scripts'],\\n    ['branch', 'main'],\\n    ['download', []], // By default, all supported files in the repository will be downloaded. Override with just a subset of files here\\n    ['new-file', []], // If a repository listing fails, only files returned by ns.ls() will be downloaded. You can add additional files to seek out here.\\n    ['subfolder', ''], // Can be set to download to a sub-folder that is not part of the remote repository structure\\n    ['extension', ['.js', '.ns', '.txt', '.script']], // Files to download by extension\\n    ['omit-folder', ['/Temp/']], // Folders to omit\\n];\\n// https://github.com/danielyxie/bitburner/blob/dev/markdown/bitburner.ns.flags.md\\n\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : null;\\n    if ([\\\"--download\\\", \\\"--subfolder\\\", \\\"--omit-folder\\\"].includes(lastFlag))\\n        return data.scripts;\\n    return [];\\n}\\n\\n/** @param {NS} ns \\n * Will try to download a fresh version of every file on the current server.\\n * You are responsible for:\\n * - Backing up your save / scripts first (try `download *` in the terminal)\\n * - Ensuring you have no local changes that you don't mind getting overwritten **/\\nexport async function main(ns) {\\n    options = ns.flags(argsSchema);\\n    if (options.subfolder && !options.subfolder.startsWith('/'))\\n        options.subfolder = '/' + options.subfolder; // Game requires folders to have a leading slash. Add one if it's missing.\\n    const baseUrl = `raw.githubusercontent.com/${options.github}/${options.repository}/${options.branch}/`;\\n    const filesToDownload = options['new-file'].concat(options.download.length > 0 ? options.download : await repositoryListing(ns));\\n    for (const localFilePath of filesToDownload) {\\n        let fullLocalFilePath = pathJoin(options.subfolder, localFilePath);\\n        const remoteFilePath = `https://` + pathJoin(baseUrl, localFilePath);\\n        ns.print(`Trying to update \\\"${fullLocalFilePath}\\\" from ${remoteFilePath} ...`);\\n        if (await ns.wget(`${remoteFilePath}?ts=${new Date().getTime()}`, fullLocalFilePath) && await rewriteFileForSubfolder(ns, fullLocalFilePath))\\n            ns.tprint(`SUCCESS: Updated \\\"${localFilePath}\\\" to the latest from ${remoteFilePath}`);\\n        else\\n            ns.tprint(`WARNING: \\\"${localFilePath}\\\" was not updated. (Currently running or not located at ${remoteFilePath} )`)\\n    }\\n    ns.tprint(`INFO: Pull complete. try to run basis.js`);\\n\\n    ns.spawn (\\\"basis.js\\\", {threads: 1, spawnDelay: 300});\\n}\\n\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nfunction pathJoin(...args) {\\n    return args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n\\n/** @param {NS} ns\\n * Rewrites a file with path substitions to handle downloading to a subfolder. **/\\nexport async function rewriteFileForSubfolder(ns, path) {\\n    if (!options.subfolder || path.includes('git-pull.js'))\\n        return true;\\n    let contents = ns.read(path);\\n    // Replace subfolder reference in helpers.js getFilePath:\\n    contents = contents.replace(`const subfolder = ''`, `const subfolder = '${options.subfolder}/'`);\\n    // Replace any imports, which can't use getFilePath:\\n    contents = contents.replace(/from '(\\\\.\\\\/)?(.*)'/g, `from '${pathJoin(options.subfolder, '$2')}'`);\\n    await ns.write(path, contents, 'w');\\n    return true;\\n}\\n\\n/** @param {NS} ns \\n * Gets a list of files to download, either from the github repository (if supported), or using a local directory listing **/\\nasync function repositoryListing(ns, folder = '') {\\n    // Note: Limit of 60 free API requests per day, don't over-do it\\n    const listUrl = `https://api.github.com/repos/${options.github}/${options.repository}/contents/${folder}?ref=${options.branch}`\\n    let response = null;\\n    try {\\n        response = await fetch(listUrl); // Raw response\\n        // Expect an array of objects: [{path:\\\"\\\", type:\\\"[file|dir]\\\" },{...},...]\\n        response = await response.json(); // Deserialized\\n        // Sadly, we must recursively retrieve folders, which eats into our 60 free API requests per day.\\n        const folders = response.filter(f => f.type == \\\"dir\\\").map(f => f.path);\\n        let files = response.filter(f => f.type == \\\"file\\\").map(f => f.path)\\n            .filter(f => options.extension.some(ext => f.endsWith(ext)));\\n        ns.print(`The following files exist at ${listUrl}\\\\n${files.join(\\\", \\\")}`);\\n        for (const folder of folders)\\n            files = files.concat((await repositoryListing(ns, folder))\\n                .map(f => `/${f}`)); // Game requires folders to have a leading slash\\n        return files;\\n    } catch (error) {\\n        if (folder !== '') throw error; // Propagate the error if this was a recursive call.\\n        ns.tprint(`WARNING: Failed to get a repository listing (GitHub API request limit of 60 reached?): ${listUrl}` +\\n            `\\\\nResponse Contents (if available): ${JSON.stringify(response ?? '(N/A)')}\\\\nError: ${String(error)}`);\\n        // Fallback, assume the user already has a copy of all files in the repo, and use it as a directory listing\\n        return ns.ls('home').filter(name => options.extension.some(ext => name.endsWith(ext)) &&\\n            !options['omit-folder'].some(dir => name.startsWith(dir)));\\n    }\\n}\",\"filename\":\"git-init.js\",\"server\":\"home\"}}],[\"basis.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { settings, timeStamp } from \\\"./lib.helpers.js\\\";\\r\\n\\r\\n// https://github.com/bitburner-official/bitburner-src/blob/stable/markdown/bitburner.ns.flags.md\\r\\nconst argsSchema = [\\r\\n\\t['nextAction', undefined], // platzhalter für eine nächste Aktion\\r\\n\\t['neustart', false], // \\r\\n\\t['target', undefined], // \\r\\n\\t['help', false], // \\r\\n];\\r\\n\\r\\nexport async function main(ns) {\\r\\n\\tlet debug = true;\\r\\n\\t// checks zum start\\r\\n\\tconst opt = ns.flags(argsSchema);\\r\\n\\tif (opt.help) {\\r\\n\\t\\tlet info = \\\"INFO: dieses script soll den Start managen, erstes geld sammeln und Hacknet initieren\\\";\\r\\n\\t\\tns.tprint(info);\\r\\n\\t\\treturn 0\\r\\n\\t}\\r\\n\\tif (ns.getHostname() !== 'home') { ns.tprint('ERROR: dieses Skript sollte nur von home starten'); return -1 }\\r\\n\\tif (opt.neustart) { opt.nextAction = 'neustart' }\\r\\n\\tif (opt.target) { settings.setItem('target', opt.target) }\\r\\n\\r\\n\\t// wirklicher start ***************************************************************\\r\\n\\tns.tprint(`[${timeStamp()}] Starte Skript '${ns.getScriptName()}'`)\\r\\n\\t// Plan:: dieses script soll den start managen (eventuell auch alles), mangels kontrolle\\r\\n\\t// Plan:: wird man den user zum aufstocken von Ram auffordern müssen\\r\\n\\t// Plan:: 200k Hacknet invest kann das script regeln\\r\\n\\r\\n\\t// Plan:: 1.\\tprüfen wieviel ram wir haben <32GB??? nee erstmal so\\r\\n\\tlet action;\\r\\n\\tif (opt.nextAction) { // diese anweisung sollte alle anderen overrulen, zB zum aufräumen\\r\\n\\t\\taction = opt.nextAction;\\r\\n\\t} else if (settings.nextAction) {\\r\\n\\t\\taction = settings.nextAction;\\r\\n\\t\\tsettings.resetItem('nextAction');\\r\\n\\t} else { // wenn noch nichts passiert ist, müssen wir wohl erstmal nachschauen\\r\\n\\r\\n\\t\\tif (!settings.lastAction) { //soll endlosschleifen verhindern \\r\\n\\t\\t\\taction = 'spider';\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tdToast('' + settings.getItem(settings.botnetName)['bots'][settings.target]);\\r\\n\\r\\n\\tdToast(\\\"Switch/Case: \\\" + action);\\r\\n\\tswitch (action) {\\r\\n\\t\\tcase 'neustart':\\r\\n\\t\\t\\tsettings.resetItem('nextAction');\\r\\n\\t\\t\\tsettings.resetItem('lastAction');\\r\\n\\t\\t\\taction = 'spider'\\r\\n\\r\\n\\t\\tcase 'spider':\\r\\n\\t\\t\\tscriptChaining(ns, action, 'evaluate', ns.getScriptName());\\r\\n\\t\\t\\t// throw new Error('an dem punkt sollte das script nicht ankommen');\\r\\n\\t\\t\\tbreak;\\r\\n\\t\\tcase 'evaluate':\\r\\n\\t\\t\\tsettings.setItem('lastAction', action);\\r\\n\\t\\t\\tlet botNet = settings.getItem(settings.botnetName)['bots'];\\r\\n\\t\\t\\tlet target = botNet[settings.target];\\r\\n\\t\\t\\tlet growCount = Math.ceil(target.growCount);\\r\\n\\t\\t\\tlet slots = 0;\\r\\n\\t\\t\\tlet index = Object.keys(botNet);\\r\\n\\r\\n\\t\\t\\tfor (let name of index) {\\r\\n\\t\\t\\t\\tslots += Math.floor(botNet[name]['maxRam'] / 1.75);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tlet weakCount = Math.ceil(target.weakCount + ns.growthAnalyzeSecurity(slots - target.weakCount, settings.target) * 20);\\r\\n\\r\\n\\r\\n\\r\\n\\t\\t\\tif (target.isReady) {\\r\\n\\t\\t\\t\\t// target.ist ready START\\r\\n\\t\\t\\t\\tdToast('target is Ready');\\r\\n\\r\\n\\t\\t\\t\\tlet hThreads = slots - 2;\\r\\n\\t\\t\\t\\tlet hackValue = ns.hackAnalyze(settings.target) * target.maxMoney;\\r\\n\\t\\t\\t\\tlet gThreads, wThreads;\\r\\n\\r\\n\\t\\t\\t\\t// hier die aktion definieren wenn target bereit für HGW ist\\r\\n\\t\\t\\t\\tlet reCalc = false;\\r\\n\\t\\t\\t\\tdo {\\r\\n\\t\\t\\t\\t\\tgThreads = Math.ceil(ns.growthAnalyze(settings.target, 1750000 / Math.max(1750000 - (hackValue * hThreads * 3), 1)));\\r\\n\\t\\t\\t\\t\\twThreads = ns.hackAnalyzeSecurity(hThreads * 3, settings.target);\\r\\n\\t\\t\\t\\t\\twThreads += ns.growthAnalyzeSecurity(gThreads, settings.target);\\r\\n\\t\\t\\t\\t\\twThreads = Math.floor(wThreads * 20);\\r\\n\\r\\n\\t\\t\\t\\t\\tlet threadSum = hThreads + gThreads + wThreads;\\r\\n\\t\\t\\t\\t\\tif (threadSum > slots) {\\r\\n\\t\\t\\t\\t\\t\\treCalc = true;\\r\\n\\t\\t\\t\\t\\t\\thThreads--;\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\treCalc = false;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t} while (reCalc)\\r\\n\\r\\n\\t\\t\\t\\tdToast(`Threads  H: ${hThreads} G: ${gThreads} W: ${wThreads} `)\\r\\n\\r\\n\\t\\t\\t\\tfor (let name of index) {\\r\\n\\t\\t\\t\\t\\tlet count = Math.floor(botNet[name]['maxRam'] / 1.75);\\r\\n\\t\\t\\t\\t\\tdToast(`${name}  count: ${count} `)\\r\\n\\r\\n\\t\\t\\t\\t\\tif (wThreads > 0) { // es muß noch geweaked werden\\r\\n\\t\\t\\t\\t\\t\\tif (count >= wThreads) {\\t// es sind genug slots auf diesem computer\\r\\n\\t\\t\\t\\t\\t\\t\\tdToast(`    weaking  count: ${wThreads} `)\\r\\n\\t\\t\\t\\t\\t\\t\\tns.exec(settings.files.weaking, name, wThreads, ...[settings.target, wThreads]);\\r\\n\\t\\t\\t\\t\\t\\t\\tcount -= wThreads;\\r\\n\\t\\t\\t\\t\\t\\t\\twThreads = 0;\\r\\n\\t\\t\\t\\t\\t\\t} else {\\t// es sind NICHT genug slots auf diesem computer\\r\\n\\t\\t\\t\\t\\t\\t\\tdToast(`    weaking  count: ${count} `)\\r\\n\\t\\t\\t\\t\\t\\t\\tns.exec(settings.files.weaking, name, count, ...[settings.target, count]);\\r\\n\\t\\t\\t\\t\\t\\t\\twThreads -= count;\\r\\n\\t\\t\\t\\t\\t\\t\\tcount = 0;\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdToast(`  remaining wThreads: ${wThreads} `)\\r\\n\\r\\n\\t\\t\\t\\t\\tif (gThreads > 0 && count > 0) { // es muß noch gegrowth werden\\r\\n\\t\\t\\t\\t\\t\\tif (count >= gThreads) {\\t// es sind genug slots auf diesem computer\\r\\n\\t\\t\\t\\t\\t\\t\\tdToast(`    growing  count: ${gThreads} `)\\r\\n\\t\\t\\t\\t\\t\\t\\tns.exec(settings.files.growing, name, gThreads, ...[settings.target, gThreads]);\\r\\n\\t\\t\\t\\t\\t\\t\\tcount -= gThreads;\\r\\n\\t\\t\\t\\t\\t\\t\\tgThreads = 0;\\r\\n\\t\\t\\t\\t\\t\\t} else {\\t// es sind NICHT genug slots auf diesem computer\\r\\n\\t\\t\\t\\t\\t\\t\\tdToast(`    growing  count: ${count} `)\\r\\n\\t\\t\\t\\t\\t\\t\\tns.exec(settings.files.growing, name, count, ...[settings.target, count]);\\r\\n\\t\\t\\t\\t\\t\\t\\tgThreads -= count;\\r\\n\\t\\t\\t\\t\\t\\t\\tcount = 0;\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdToast(`  remaining gThreads: ${gThreads} `)\\r\\n\\r\\n\\t\\t\\t\\t\\tif (hThreads > 0 && count > 0) { // es muß noch gehacked werden\\r\\n\\t\\t\\t\\t\\t\\tif (count >= hThreads) {\\t// es sind genug slots auf diesem computer\\r\\n\\t\\t\\t\\t\\t\\t\\tdToast(`    hacking  count: ${hThreads} `)\\r\\n\\t\\t\\t\\t\\t\\t\\tns.exec(settings.files.hacking, name, hThreads, ...[settings.target, hThreads, 3]);\\r\\n\\t\\t\\t\\t\\t\\t\\tcount -= hThreads;\\r\\n\\t\\t\\t\\t\\t\\t\\thThreads = 0;\\r\\n\\t\\t\\t\\t\\t\\t} else {\\t// es sind NICHT genug slots auf diesem computer\\r\\n\\t\\t\\t\\t\\t\\t\\tdToast(`    hacking  count: ${count} `)\\r\\n\\t\\t\\t\\t\\t\\t\\tns.exec(settings.files.hacking, name, count, ...[settings.target, count, 3]);\\r\\n\\t\\t\\t\\t\\t\\t\\thThreads -= count;\\r\\n\\t\\t\\t\\t\\t\\t\\tcount = 0;\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tdToast(`  remaining hThreads: ${hThreads} `)\\r\\n\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tdToast(`await ns.weaken`)\\r\\n\\t\\t\\t\\tawait ns.weaken(settings.target);\\r\\n\\t\\t\\t\\tscriptChaining(ns, 'spider', 'evaluate', ns.getScriptName());\\r\\n\\r\\n\\t\\t\\t\\t// target.ist ready ENDE\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tdToast('target is NOT Ready');\\r\\n\\t\\t\\t\\t// hier die aktionen definieren um den Server bereit zu machen\\r\\n\\t\\t\\t\\t// es sind 2 situationen denkbar (werden wohl zu 2 reduziert):\\r\\n\\t\\t\\t\\t// * slots reichen um geld zu maximieren und weaks auszuführen\\r\\n\\t\\t\\t\\t// * oder es braucht mehrere runden\\r\\n\\t\\t\\t\\t// n00dles macht es uns leicht, hier reicht die startaufstellung\\r\\n\\t\\t\\t\\tdToast(`Threads  slots: ${slots} G: ${growCount} W: ${weakCount} `)\\r\\n\\t\\t\\t\\tif ((growCount + weakCount) < slots) {\\r\\n\\t\\t\\t\\t\\tweakCount-- // finetuning (weil wir selber einen weak machen)\\r\\n\\t\\t\\t\\t\\tfor (let name of index) {\\r\\n\\t\\t\\t\\t\\t\\t// slots ausrechnen\\r\\n\\t\\t\\t\\t\\t\\t// starte die scripts mit grow\\r\\n\\t\\t\\t\\t\\t\\t// reduziere growCount um die slotanzahl\\r\\n\\t\\t\\t\\t\\t\\t// dann weak --> rest grow (für hackinglvl)\\r\\n\\t\\t\\t\\t\\t\\tlet count = Math.floor(botNet[name]['maxRam'] / 1.75);\\r\\n\\t\\t\\t\\t\\t\\tdToast(`${name}  count: ${count} `)\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif (weakCount > 0) { // es muß noch geweaked werden\\r\\n\\t\\t\\t\\t\\t\\t\\tif (count >= weakCount) {\\t// es sind genug slots auf diesem computer\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdToast(`    weaking  weakCount: ${weakCount} `)\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tns.exec(settings.files.weaking, name, weakCount, ...[settings.target, weakCount]);\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcount -= weakCount;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tweakCount = 0;\\r\\n\\t\\t\\t\\t\\t\\t\\t} else {\\t// es sind NICHT genug slots auf diesem computer\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif (count > 0) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdToast(`    weaking  count: ${count} `)\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tns.exec(settings.files.weaking, name, count, ...[settings.target, count]);\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tweakCount -= count;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tcount = 0;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tdToast(`  remaining weakCount: ${weakCount} `)\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif (count > 0) {\\t// rest wird gegrowth\\r\\n\\t\\t\\t\\t\\t\\t\\tdToast(`    growing  count: ${count} `)\\r\\n\\t\\t\\t\\t\\t\\t\\tns.exec(settings.files.growing, name, count, ...[settings.target, count]);\\r\\n\\t\\t\\t\\t\\t\\t\\tgrowCount -= count;\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tdToast(`  remaining growCount: ${growCount} `)\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t//selber warten also \\\"weaken\\\"\\r\\n\\t\\t\\t\\t\\tawait ns.weaken(settings.target);\\r\\n\\r\\n\\t\\t\\t\\t\\t// end slots reichen aus\\r\\n\\t\\t\\t\\t} else {\\r\\n\\r\\n\\t\\t\\t\\t\\t// start slots reichen nicht aus\\r\\n\\r\\n\\r\\n\\t\\t\\t\\t\\t// yyy \\r\\n\\t\\t\\t\\t\\tif (target.needWeakens) {\\r\\n\\t\\t\\t\\t\\t\\tfor (let name of index) {\\r\\n\\t\\t\\t\\t\\t\\t\\t// slots ausrechnen\\r\\n\\t\\t\\t\\t\\t\\t\\t// starte die scripts mit grow\\r\\n\\t\\t\\t\\t\\t\\t\\t// reduziere growCount um die slotanzahl\\r\\n\\t\\t\\t\\t\\t\\t\\t// dann weak --> rest grow (für hackinglvl)\\r\\n\\t\\t\\t\\t\\t\\t\\tlet count = Math.floor(botNet[name]['maxRam'] / 1.75);\\r\\n\\t\\t\\t\\t\\t\\t\\tdToast(`${name}  count: ${count} `)\\r\\n\\t\\t\\t\\t\\t\\t\\tif (count > 0) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdToast(`    weaking  count: ${count} `)\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tns.exec(settings.files.weaking, name, count, ...[settings.target, count]);\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tweakCount -= count;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcount = 0;\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t//selber warten also \\\"weaken\\\"\\r\\n\\t\\t\\t\\t\\t\\tawait ns.weaken(settings.target);\\r\\n\\t\\t\\t\\t\\t\\t// yyy\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\r\\n\\t\\t\\t\\t\\tlet gMul = 5;\\r\\n\\t\\t\\t\\t\\tlet wMul = 4;\\r\\n\\t\\t\\t\\t\\t//dToast(`Threads  slots: ${slots} G: ${growCount} W: ${weakCount} `)\\r\\n\\t\\t\\t\\t\\tlet zwischensumme = Math.ceil((growCount + weakCount) / slots)\\r\\n\\t\\t\\t\\t\\tgMul *= zwischensumme;\\r\\n\\t\\t\\t\\t\\twMul *= zwischensumme;\\r\\n\\t\\t\\t\\t\\tgrowCount = Math.ceil(growCount / zwischensumme);\\r\\n\\t\\t\\t\\t\\tweakCount = Math.ceil(weakCount / zwischensumme);\\r\\n\\r\\n\\t\\t\\t\\t\\tzwischensumme = (slots - growCount - weakCount);\\r\\n\\t\\t\\t\\t\\tweakCount += zwischensumme;\\r\\n\\r\\n\\r\\n\\t\\t\\t\\t\\tdToast(`slots: ${slots} growCount: ${growCount} (${gMul}) weakCount: ${weakCount} (${wMul})  `)\\r\\n\\r\\n\\t\\t\\t\\t\\t// xxx\\r\\n\\t\\t\\t\\t\\tfor (let name of index) {\\r\\n\\t\\t\\t\\t\\t\\t// slots ausrechnen\\r\\n\\t\\t\\t\\t\\t\\t// starte die scripts mit grow\\r\\n\\t\\t\\t\\t\\t\\t// reduziere growCount um die slotanzahl\\r\\n\\t\\t\\t\\t\\t\\t// dann weak --> rest grow (für hackinglvl)\\r\\n\\t\\t\\t\\t\\t\\tlet count = Math.floor(botNet[name]['maxRam'] / 1.75);\\r\\n\\t\\t\\t\\t\\t\\tdToast(`${name}  count: ${count} `)\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif (weakCount > 0) { // es muß noch geweaked werden\\r\\n\\t\\t\\t\\t\\t\\t\\tif (count >= weakCount) {\\t// es sind genug slots auf diesem computer\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdToast(`    weaking  weakCount: ${weakCount} `)\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tns.exec(settings.files.weaking, name, weakCount, ...[settings.target, weakCount, wMul]);\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tcount -= weakCount;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tweakCount = 0;\\r\\n\\t\\t\\t\\t\\t\\t\\t} else {\\t// es sind NICHT genug slots auf diesem computer\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif (count > 0) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdToast(`    weaking  count: ${count} `)\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tns.exec(settings.files.weaking, name, count, ...[settings.target, count, wMul]);\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tweakCount -= count;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tcount = 0;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tdToast(`  remaining weakCount: ${weakCount} `)\\r\\n\\r\\n\\t\\t\\t\\t\\t\\tif (count > 0) {\\t// rest wird gegrowth\\r\\n\\t\\t\\t\\t\\t\\t\\tdToast(`    growing  count: ${count} `)\\r\\n\\t\\t\\t\\t\\t\\t\\tns.exec(settings.files.growing, name, count, ...[settings.target, count, gMul]);\\r\\n\\t\\t\\t\\t\\t\\t\\tgrowCount -= count;\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tdToast(`  remaining growCount: ${growCount} `)\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t//selber warten also \\\"weaken\\\"\\r\\n\\t\\t\\t\\t\\tfor (let i = 0; i < wMul; i++) {\\r\\n\\t\\t\\t\\t\\t\\tawait ns.weaken(settings.target);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\t\\t// xxx\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\t\\t\\t\\t\\t// end slots reichen nicht aus\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t// und von vorne\\r\\n\\t\\t\\t\\tscriptChaining(ns, 'spider', 'evaluate', ns.getScriptName());\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t/* ports: ns.getServerNumPortsRequired(node),\\r\\n\\t\\t\\thackingLevel: ns.getServerRequiredHackingLevel(node),\\r\\n\\t\\t\\tmaxMoney: ns.getServerMaxMoney(node),\\r\\n\\t\\t\\tgrowth: ns.getServerGrowth(node),\\r\\n\\t\\t\\tgrowCount: growCount,\\r\\n\\t\\t\\tweakCount: weakCount,\\r\\n\\t\\t\\tisReady: isReady,\\r\\n\\t\\t\\tneedGrows: needGrows,\\r\\n\\t\\t\\tneedWeakens: needWeakens,\\r\\n\\t\\t\\tminSecurityLevel: ns.getServerMinSecurityLevel(node),\\r\\n\\t\\t\\tbaseSecurityLevel: ns.getServerBaseSecurityLevel(node),\\r\\n\\t\\t\\tmaxRam: ns.getServerMaxRam(node),\\r\\n\\t\\t\\tfiles: ns.ls(node),\\r\\n\\t\\t\\tchildren: children,\\r\\n\\t\\t\\tparent: parent, */\\r\\n\\r\\n\\t\\t\\tbreak;\\r\\n\\t\\tcase 'stop':\\r\\n\\t\\t\\tsettings.resetItem('nextAction');\\r\\n\\t\\t\\tbreak;\\r\\n\\t\\tcase 'reset':\\r\\n\\t\\t\\tsettings.resetItem('nextAction');\\r\\n\\t\\t\\tsettings.resetItem('lastAction');\\r\\n\\t\\t\\tbreak;\\r\\n\\t\\tdefault:\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\t/** \\t\\tlet action = 'spider';\\r\\n\\t\\tlet script = settings.files[action];\\r\\n\\r\\n\\t\\tns.tprint(`[${timeStamp()}] Übergebe an Skript '${options.nextScript}'`)\\r\\n\\t\\tns.spawn(options.nextScript, { threads: 1, spawnDelay: 50 }) */\\r\\n\\r\\n\\t// Plan:: 1.1\\tbei 8gb sind wir noch am anfang und sollten NUR n00dles schröpfen (10-20min)\\r\\n\\t// Plan:: 1.1a\\tdaten sammeln und HGW-Scripte verteilen --> spider <100ms\\r\\n\\t// Plan:: 1.1b\\tentscheidungsfindung \\r\\n\\t// Plan:: 1.1c\\tHGW gegen n00dles\\r\\n\\t// Plan:: 1.1d\\tspider ... a s o \\r\\n\\t// Plan:: 1.2\\thier nen teuflisch guten plan machen oder ram ausreizen AKA kommt später ...\\r\\n\\r\\n\\r\\n\\r\\n\\tns.tprint(`[${timeStamp()}] Skript '${ns.getScriptName()} endet bei EOF'`);\\r\\n\\r\\n\\r\\n\\tfunction dToast(msg) {\\r\\n\\t\\tif (debug) ns.tprint('info: ' + msg);\\r\\n\\t}\\r\\n\\r\\n} // end main\\r\\n\\r\\nfunction scriptChaining(ns, action, nextAction = undefined, nextScript = undefined) {\\r\\n\\tlet script = settings.files[action];\\r\\n\\tsettings.setItem('nextAction', nextAction);\\r\\n\\tsettings.setItem('lastAction', action);\\r\\n\\tns.tprint(`[${timeStamp()}] Übergebe an Skript '${script}'`)\\r\\n\\tns.spawn(script, { threads: 1, spawnDelay: settings.spawnDelay }, nextScript);\\r\\n\\tns.exit()\\r\\n}\\r\\n\\r\\n// Formelklau ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\r\\nexport function calculateGrowGain(ns, host, threads = 1, cores = 1, opts = {}) {\\r\\n\\tthreads = Math.max(Math.floor(threads), 0);\\r\\n\\tconst moneyMax = ns.getServerMaxMoney(host);\\r\\n\\tconst moneyAvailable = opts.moneyAvailable;\\r\\n\\tconst rate = growPercent(ns, host, threads, cores, opts);\\r\\n\\treturn Math.min(moneyMax, rate * (moneyAvailable + threads)) -\\r\\n\\t\\tmoneyAvailable;\\r\\n}\\r\\n\\r\\n/** @param {number} gain money to be added to the server after grow */\\r\\nexport function calculateGrowThreads(ns, host, gain, cores = 1, opts = {}) {\\r\\n\\tconst moneyMax = ns.getServerMaxMoney(host);\\r\\n\\tconst moneyAvailable = opts.moneyAvailable;\\r\\n\\tconst money = Math.min(Math.max(moneyAvailable + gain, 0),\\r\\n\\t\\tmoneyMax);\\r\\n\\tconst rate = Math.log(growPercent(ns, host, 1, cores, opts));\\r\\n\\tconst logX = Math.log(money * rate) + moneyAvailable * rate;\\r\\n\\treturn Math.max(lambertWLog(logX) / rate - moneyAvailable, 0);\\r\\n}\\r\\n\\r\\nfunction growPercent(ns, host, threads = 1, cores = 1, opts = {}) {\\r\\n\\tconst ServerGrowthRate = opts.ServerGrowthRate;\\r\\n\\tconst hackDifficulty = opts.hackDifficulty;\\r\\n\\tconst growth = ns.getServerGrowth(host) / 100;\\r\\n\\tconst multiplier = ns.getPlayer().mults.hacking_grow;\\r\\n\\tconst base = Math.min(1 + 0.03 / hackDifficulty, 1.0035);\\r\\n\\tconst power = growth * ServerGrowthRate * multiplier * ((cores +\\r\\n\\t\\t15) / 16);\\r\\n\\treturn base ** (power * threads);\\r\\n}\\r\\n\\r\\n/** \\r\\n* Lambert W-function for log(x) when k = 0 \\r\\n* {@link https://gist.github.com/xmodar/baa392fc2bec447d10c2c20bbdcaf687} \\r\\n*/\\r\\nfunction lambertWLog(logX) {\\r\\n\\tif (isNaN(logX)) return NaN;\\r\\n\\tconst logXE = logX + 1;\\r\\n\\tconst logY = 0.5 * log1Exp(logXE);\\r\\n\\tconst logZ = Math.log(log1Exp(logY));\\r\\n\\tconst logN = log1Exp(0.13938040121300527 + logY);\\r\\n\\tconst logD = log1Exp(-0.7875514895451805 + logZ);\\r\\n\\tlet w = -1 + 2.036 * (logN - logD);\\r\\n\\tw *= (logXE - Math.log(w)) / (1 + w);\\r\\n\\tw *= (logXE - Math.log(w)) / (1 + w);\\r\\n\\tw *= (logXE - Math.log(w)) / (1 + w);\\r\\n\\treturn isNaN(w) ? (logXE < 0 ? 0 : Infinity) : w;\\r\\n}\\r\\nconst log1Exp = (x) => x <= 0 ? Math.log(1 + Math.exp(x)) : x +\\r\\n\\tlog1Exp(-x);\\r\\n// Formelklau ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\",\"filename\":\"basis.js\",\"server\":\"home\"}}],[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"home\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"home\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"home\"}}],[\"ego_hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"//ego_hack.js\\r\\nexport async function main(ns) {\\r\\n    // Definiert den \\\"Zielserver\\\"\\r\\n    var target = ns.args[0];\\r\\n\\r\\n    // Definiert wie viel Geld ein Server haben sollte bevor wir ihn Hacken\\r\\n    // In unserem Fall also auf 75% von dem maximalen Geld des Servers\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n    // Definiert die maximale Sicherheitsstufe, die dieser Server erreichen kann\\r\\n    // Wenn diese Stufe zu hoch ist werden wir ihn \\r\\n    // \\\"weaken\\\" also schwächen, bevor wir loshacken\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n    // Das ist eine Endlose Schleife die den Zielserver kontinuierlich schwächt\\r\\n    while(true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // Wenn die Sichherheitsstufe über unserem Schwellenwert liegt, dann schwächen wir diese ab\\r\\n            await ns.weaken(target);\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // Wenn das Geld vom anvisierten Server unter unserem Schwellenwert liegt, dannn vergrößern wir es\\r\\n            await ns.grow(target);\\r\\n        } else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\",\"filename\":\"ego_hack.js\",\"server\":\"home\"}}],[\"go.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// go.js rewrite 2024/04\\n\\n/* --------------------------------------------------------------------- *//**\\n * Kernprogramm, das folgende Aufgaben löst:\\n * - Server finden: Das Programm soll regelmäßig die Server suchen, die mit\\n *   Home verbunden sind.\\n * - weitere Ressourcen ermitteln: Hacks müssen freigespielt werden, das soll\\n *   das Programm auch machen\\n * - Geld verdienen: unter den bekannten Servern wird nach angreifbaren\\n *   Servern gesucht, diese gehackt und ausgebeutet\\n * - Strategie: zeitlich abgestimmtes batching WGHW? i\\n * - Ziele priorisieren: was ist das lohnenswerteste ziel?\\n * - Vorgänge monitoren: was soll da stehen?\\n * - nebenher Hacknet bedienen\\n * - server kaufen : dazu gehört auch schon gekaufte server erkennen, und wenn\\n *   nötig abstoßen und verbessern\\n *\\n * @param {Object} ns - bitburners vordefinierte Netscript funktionen\\n * ------------------------------------------------------------------------ */\\nexport async function main(ns) {\\n\\t/* init \\n\\t * ???\\n\\t */\\n\\n\\t/* große Schleife \\n\\t * - server finden\\n\\t * - vorbereiten (hacken & scripts verteilen)\\n\\t */\\n\\n\\t/* kleine schleife \\n\\t * - ausbeuten\\n\\t */\\n\\n\\t/* interne funktionen und klassen */\\n\\n} //end main()\",\"filename\":\"go.js\",\"server\":\"home\"}}],[\"lib.server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { settings } from \\\"./lib.helpers.js\\\";\\n\\n/* ----------------------------------------------------------------------- *//**\\n * eine Klasse um Werte einheitlich abzufragen\\n *\\n * @class BaseServer (name)\\n * -------------------------------------------------------------------------- */\\nexport class BaseServer {\\n\\t//private interne id\\n\\t#id\\n\\n\\t/* ---------------------------------------------------------------------- *//**\\n\\t * @param {NS} ns\\n\\t * @param {string} hostname of server\\n\\t * \\n\\t * ------------------------------------------------------------------------- */\\n\\tconstructor(ns, hostname) {\\n\\t\\t//if (ns.getServer(hostname).hostname!==hostname) throw new Error(hostname + 'ist kein Server!');\\n\\t\\tthis.ns = ns;\\n\\t\\tthis.#id = hostname;\\n\\t\\t//provoziert nen Fehler wenn der server nicht existiert\\n\\t\\tns.getServer(hostname);\\n\\t}\\n\\t/** Returns the hostname of this server (at initialisation) */\\n\\tget id() { return this.#id }\\n\\t/** Returns the hostname of this server */\\n\\tget hostname() { return this.data.hostname; }\\n\\t/** Returns the IP of this server */\\n\\tget ip() { return this.data.ip; }\\n\\t/** @todo erstmal nur aktuelle zeit, sonst sinnlos */\\n\\tget updated_at() { return new Date().valueOf(); }\\n\\t/** Returns the data-object of this server */\\n\\tget data() { return this.ns.getServer(this.id); }\\n\\t/** Returns a boolean indicating whether or not the player has root access to this server */\\n\\tget isNuked() { return this.data.hasAdminRights; }\\n\\t/** required Hacking level the player, to hack this server */\\n\\tget reqLevel() { return this.data.requiredHackingSkill; }\\n\\t/** Returns a boolean that indicates if this server is a purchased server. */\\n\\tget purchased() { return (this.data.purchasedByPlayer && this.data.hostname !== \\\"home\\\"); }\\n\\t/** Flag indicating whether player is currently connected to this server */\\n\\tget connected() { return this.data.isConnectedTo; }\\n\\t/** Flag indicating whether this server has a backdoor installed by a player */\\n\\tget backdoored() { return this.data.backdoorInstalled; }\\n\\t/** How many CPU cores this server has. Affects magnitude of grow and weaken ran from this server. */\\n\\tget cores() { return this.data.cpuCores; }\\n\\n\\tget power() { return Math.max(0, Math.log2(this.data.maxRam)); }\\n\\t/** Name of company/faction/etc. that this server belongs to, not applicable to all Servers */\\n\\tget organization() { return this.data.organizationName; }\\n\\t/** Flag indicating when this server is home */\\n\\tget isHome() { return (this.data.hostname === \\\"home\\\"); }\\n\\n\\tget ram() {\\n\\t\\treturn {\\n\\t\\t\\t/** RAM (GB) used. i.e. unavailable RAM */\\n\\t\\t\\tused: this.data.ramUsed,\\n\\t\\t\\t/** Max RAM (GB) on this server (with reserved RAM consideration, see ram.trueMax) */\\n\\t\\t\\tmax: this.data.maxRam - (this.data.hostname === \\\"home\\\" ? reservedHomeRam : 0),\\n\\t\\t\\t/** RAM (GB) available on this server (with reserved RAM consideration) */\\n\\t\\t\\tfree: Math.max(0, this.data.maxRam - this.data.ramUsed - (this.data.hostname === \\\"home\\\" ? settings.reservedHomeRam : 0)),\\n\\t\\t\\t/** Max RAM (GB) on this server (without reserved RAM consideration, see ram.max) */\\n\\t\\t\\ttrueMax: this.data.maxRam\\n\\t\\t}\\n\\t}\\n\\tget ports() {\\n\\t\\treturn {\\n\\t\\t\\trequired: this.data.numOpenPortsRequired,\\n\\t\\t\\topen: this.data.openPortCount,\\n\\t\\t\\tftp: this.data.ftpPortOpen,\\n\\t\\t\\thttp: this.data.httpPortOpen,\\n\\t\\t\\tsmtp: this.data.smtpPortOpen,\\n\\t\\t\\tsql: this.data.sqlPortOpen,\\n\\t\\t\\tssh: this.data.sshPortOpen\\n\\t\\t}\\n\\t}\\n\\t/** Server's security stats */\\n\\tget security() {\\n\\t\\treturn {\\n\\t\\t\\t/** Server Security Level */\\n\\t\\t\\tlevel: this.data.hackDifficulty,\\n\\t\\t\\t/** Minimum server security level that this server can be weakened to */\\n\\t\\t\\tmin: this.data.minDifficulty,\\n\\t\\t\\t/** Server's initial server security level at creation. */\\n\\t\\t\\tbase: this.data.baseDifficulty\\n\\t\\t}\\n\\t}\\n\\tget money() {\\n\\t\\treturn {\\n\\t\\t\\t/** How much money currently resides on the server and can be hacked */\\n\\t\\t\\tavailable: this.data.moneyAvailable,\\n\\t\\t\\t/** Maximum amount of money that this server can hold */\\n\\t\\t\\tmax: this.data.moneyMax,\\n\\t\\t\\t/** Growth effectiveness statistic. Higher values produce more growth with ns.grow() */\\n\\t\\t\\tgrowth: this.data.serverGrowth\\n\\t\\t}\\n\\t}\\n\\n\\tthreadCount(scriptRam = 1.75) {\\n\\t\\tlet threads = 0;\\n\\t\\tthreads = this.ram.free / scriptRam\\n\\t\\treturn Math.floor(threads)\\n\\t}\\n}\\n\\n\\n\\n/* ----------------------------------------------------------------------- *//**\\n * funktionen zum testen der klasse\\n *\\n * @param {NS} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tlet x = new BaseServer(ns, \\\"n00dles\\\");\\n\\tns.print(x.security.level);\\n\\n}\\n\",\"filename\":\"lib.server.js\",\"server\":\"home\"}}],[\"lib.starter.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"lib.starter.js\",\"server\":\"home\"}}],[\"sim_terminal_input.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** sim_terminal_input.js\\n * Beispielcode von \\n * https://bitburner.readthedocs.io/en/latest/netscript/advancedfunctions/inject_html.html\\n * \\n * @param {NS} ns \\n * */\\nexport async function main(ns) {\\n  const doc = globalThis[\\\"document\\\"];\\n  // Acquire a reference to the terminal text field\\n  const terminalInput = doc.getElementById(\\\"terminal-input\\\");\\n\\n  // Set the value to the command you want to run.\\n  terminalInput.value = \\\"home;connect n00dles;home;connect n00dles;home;\\\";\\n\\n  // Get a reference to the React event handler.\\n  const handler = Object.keys(terminalInput)[1];\\n\\n  // Perform an onChange event to set some internal values.\\n  terminalInput[handler].onChange({ target: terminalInput });\\n\\n  // Simulate an enter press\\n  terminalInput[handler].onKeyDown({ key: 'Enter', preventDefault: () => null });\\n\\n}\",\"filename\":\"sim_terminal_input.js\",\"server\":\"home\"}}],[\"spamHack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"//spamHack.js\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  await ns.hack(ns.args[0]);\\r\\n}\",\"filename\":\"spamHack.js\",\"server\":\"home\"}}],[\"test.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let facServers = {\\n\\t\\\"CSEC\\\": \\\"red\\\",\\n\\t\\\"avmnite-02h\\\": \\\"cyan\\\",\\n\\t\\\"I.I.I.I\\\": \\\"cyan\\\",\\n\\t\\\"run4theh111z\\\": \\\"cyan\\\",\\n\\t\\\"w0r1d_d43m0n\\\": \\\"red\\\"\\n};\\n\\nexport async function main(ns) {\\n\\tconst box = createBox(\\\"My box\\\", \\\"Hello, world!\\\");\\n\\n\\tlet output = `<font color='lime'>Network:</font>`;\\n\\tlet list = [\\\"home\\\"];\\n\\tlet temp = [];\\n\\tlet tempfiles = [];\\n\\n\\twhile (true) {\\n\\t\\toutput = `<font color='lime'>Network:</font>`;\\n\\t\\tfor (var i = 0; i < list.length; i++) {\\n\\t\\t\\ttemp = ns.scan(list[i]);\\n\\t\\t\\tfor (var j = 0; j < temp.length; j++) {\\n\\t\\t\\t\\tif (!list.includes(temp[j])) { list.push(temp[j]) }\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tlet order = [[\\\"home\\\"]];\\n\\t\\tlet list1 = list.filter(item => item !== \\\"home\\\")\\n\\t\\tlet temp2 = [];\\n\\t\\tlet temp3 = [];\\n\\t\\twhile (list1.length > 0) {\\n\\t\\t\\ttemp3 = order[order.length - 1];\\n\\t\\t\\ttemp2 = [];\\n\\t\\t\\tfor (i = 0; i < list1.length; i++) {\\n\\t\\t\\t\\tfor (j = 0; j < temp3.length; j++) {\\n\\t\\t\\t\\t\\tif (ns.scan(list1[i]).includes(temp3[j])) {\\n\\t\\t\\t\\t\\t\\ttemp2.push(list1[i]);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\torder.push(temp2);\\n\\t\\t\\ttemp3 = order[order.length - 1];\\n\\t\\t\\tfor (i = 0; i < list1.length; i++) {\\n\\t\\t\\t\\tif (temp3.includes(list1[i])) {\\n\\t\\t\\t\\t\\tlist1 = list1.filter(item => item !== list1[i]);\\n\\t\\t\\t\\t\\ti--;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tlet depthchart = \\\"\\\";\\n\\t\\tfor (i = 0; i < order.length; i++) {\\n\\t\\t\\tdepthchart += \\\"|\\\" + i + \\\",\\\" + order[i].toString();\\n\\t\\t}\\n\\t\\tlet depthlist = depthchart.split(\\\"|\\\");\\n\\t\\tdepthlist.shift();\\n\\t\\tfor (i = 0; i < depthlist.length; i++) {\\n\\t\\t\\tdepthlist[i] = depthlist[i].split(\\\",\\\");\\n\\t\\t}\\n\\n\\t\\tfor (i = 0; i < list.length; i++) {\\n\\t\\t\\tlet name = list[i];\\n\\t\\t\\tlet spacer = \\\"-\\\";\\n\\t\\t\\tlet depth = 0;\\n\\t\\t\\tfor (j = 0; j < depthlist.length; j++) {\\n\\t\\t\\t\\tif (depthlist[j].includes(list[i])) {\\n\\t\\t\\t\\t\\tdepth = depthlist[j][0];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tlet steps = [list[i]]\\n\\t\\t\\twhile (depth > 0) {\\n\\t\\t\\t\\tdepth--\\n\\t\\t\\t\\tfor (j = 0; j < steps.length; j++) {\\n\\t\\t\\t\\t\\tlet temp = ns.scan(steps[j]);\\n\\t\\t\\t\\t\\tfor (let k = 0; k < temp.length; k++) {\\n\\t\\t\\t\\t\\t\\tif (depthlist[depth].includes(temp[k])) {\\n\\t\\t\\t\\t\\t\\t\\tsteps.push(temp[k]);\\n\\t\\t\\t\\t\\t\\t\\tk = temp.length;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tsteps.reverse();\\n\\t\\t\\tlet goto = \\\"\\\"\\n\\t\\t\\tfor (j = 0; j < steps.length; j++) {\\n\\t\\t\\t\\tgoto += \\\";connect \\\" + steps[j];\\n\\t\\t\\t}\\n\\n\\t\\t\\tlet hackColor = ns.hasRootAccess(name) ? \\\"lime\\\" : \\\"red\\\";\\n\\n\\n\\t\\t\\tlet nameColor = facServers[name] ? facServers[name] : \\\"white\\\";\\n\\t\\t\\tif (nameColor == \\\"white\\\") {\\n\\t\\t\\t\\tlet ratio = ns.getServerSecurityLevel(name) / ns.getServerMinSecurityLevel(name);\\n\\n\\t\\t\\t\\tif (ratio > 3) {\\n\\t\\t\\t\\t\\tnameColor = \\\"Red\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse if (ratio > 2) {\\n\\t\\t\\t\\t\\tnameColor = \\\"orange\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse if (ratio > 1) {\\n\\t\\t\\t\\t\\tnameColor = \\\"green\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse nameColor = \\\"lime\\\";\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.getServerRequiredHackingLevel(name) > ns.getHackingLevel()) {\\n\\t\\t\\t\\tnameColor = \\\"darkRed\\\"\\n\\t\\t\\t}\\n\\t\\t\\tlet hoverText = [\\\"Req Level: \\\", ns.getServerRequiredHackingLevel(name),\\n\\t\\t\\t\\t\\\"&#10;Req Ports: \\\", ns.getServerNumPortsRequired(name),\\n\\t\\t\\t\\t\\\"&#10;Memory: \\\", ns.getServerMaxRam(name), \\\"GB\\\",\\n\\t\\t\\t\\t\\\"&#10;Security: \\\", ns.getServerSecurityLevel(name),\\n\\t\\t\\t\\t\\\"/\\\", ns.getServerMinSecurityLevel(name),\\n\\t\\t\\t\\t\\\"&#10;Money: \\\", Math.round(ns.getServerMoneyAvailable(name)).toLocaleString(), \\\" (\\\",\\n\\t\\t\\t\\tMath.round(100 * ns.getServerMoneyAvailable(name) / ns.getServerMaxMoney(name)), \\\"%)\\\"\\n\\t\\t\\t].join(\\\"\\\");\\n\\n\\t\\t\\tlet ctText = \\\"\\\";\\n\\n\\n\\t\\t\\ttempfiles = ns.ls(name, \\\".cct\\\");\\n\\t\\t\\tfor (j = 0; j < tempfiles.length; j++) {\\n\\t\\t\\t\\tctText += \\\"<a title='\\\" + tempfiles[j] +\\n\\t\\t\\t\\t\\t//Comment out the next line to reduce footprint by 5 GB\\n\\t\\t\\t\\t\\t\\\"&#10;\\\" + ns.codingcontract.getContractType(tempfiles[j], name) +\\n\\t\\t\\t\\t\\t\\\"'>©</a>\\\";\\n\\t\\t\\t}\\n\\t\\t\\twhile ((name.length + spacer.length + tempfiles.length) < 20) {\\n\\t\\t\\t\\tspacer += \\\"-\\\";\\n\\t\\t\\t}\\n\\t\\t\\tlet monratio = ns.getServerMoneyAvailable(name) / ns.getServerMaxMoney(name);\\n\\t\\t\\tlet money = \\\" \\\"\\n\\t\\t\\tmoney += ns.formatNumber(ns.getServerMoneyAvailable(name)) + \\\" (\\\";\\n\\t\\t\\tif (Math.round(100 * monratio) != 'Infinity') {\\n\\t\\t\\t\\tmoney += Math.round(100 * ns.getServerMoneyAvailable(name) / ns.getServerMaxMoney(name)) + \\\"%)\\\";\\n\\t\\t\\t}\\n\\t\\t\\telse { money += \\\"∞%)\\\"; }\\n\\n\\t\\t\\tlet moneyColor = \\\"red\\\";\\n\\t\\t\\tif (monratio > 0.1) {\\n\\t\\t\\t\\tmoneyColor = \\\"orange\\\";\\n\\t\\t\\t}\\n\\t\\t\\tif (monratio > 0.6) {\\n\\t\\t\\t\\tmoneyColor = \\\"yellow\\\";\\n\\t\\t\\t}\\n\\t\\t\\tif (monratio > 0.9) {\\n\\t\\t\\t\\tmoneyColor = \\\"lime\\\";\\n\\t\\t\\t}\\n\\t\\t\\toutput += '<br>' + `<tt>----<font color=${hackColor}>■ </font>` +\\n\\n\\t\\t\\t\\t`<a class='scan-analyze-link' title='${hoverText}''\\n      onClick=\\\"(function()\\n          {\\n              const terminalInput = document.getElementById('terminal-input');\\n              terminalInput.value='${goto}';\\n              const handler = Object.keys(terminalInput)[1];\\n              terminalInput[handler].onChange({target:terminalInput});\\n              terminalInput[handler].onKeyDown({key:'Enter',preventDefault:()=>null});\\n          })();\\\"\\n\\n          style='color:${nameColor}'>${name}</a> ` +\\n\\t\\t\\t\\t`<font color='fuchisa'>${ctText}</font>` + `<font color=\\\"black\\\">${spacer}</font>` +\\n\\t\\t\\t\\t`<font color='${moneyColor}'>${money}</font></tt>`;\\n\\n\\n\\t\\t}\\n\\t\\t\\n\\t\\tbox.querySelector(\\\".body\\\").innerHTML = output;\\n\\t\\t\\n\\t\\tawait ns.sleep(3000)\\n\\n\\t}\\n\\n\\t/**\\n\\t * Create a simple dialog box. This function is adapted from the code at\\n\\t *\\n\\t * https://github.com/Snarling/bitburner-scripts/blob/main/simplebox/simplebox-documented.js\\n\\t *\\n\\t * by https://github.com/Snarling\\n\\t *\\n\\t * @param {string} title The title of the box.\\n\\t * @param {string} content The content of the body of the box.\\n\\t * @returns {object} The created box.\\n\\t */\\n\\tfunction createBox(title, content) {\\n\\t\\t// A reference to the HTML document.\\n\\t\\t// eslint-disable-next-line\\n\\t\\tconst doc = globalThis[\\\"document\\\"];\\n\\n\\t\\t// CSS styles that will be injected into the HTML document.\\n\\t\\tconst css = `.box{\\n        background: black;\\n        font: 14px \\\"Lucida Console\\\";\\n        position: fixed;\\n    }\\n    .box .head{\\n        background: lime;\\n        color: black;\\n        display: flex;\\n        justify-content: space-between;\\n    }\\n    .box .title{\\n    }\\n    .box .close{\\n    }\\n    .box .body{\\n        color: lime;\\n    }`;\\n\\n\\t\\t// Inject a new style element.\\n\\t\\tdoc.head.insertAdjacentHTML(\\n\\t\\t\\t\\\"beforeEnd\\\",\\n\\t\\t\\t`<style id=box-css>${css}</style>`\\n\\t\\t);\\n\\n\\t\\tconst MYUID = crypto.randomUUID();\\n\\t\\t// Inject a container (our box div) into the HTML document.\\n\\t\\tdoc.body.insertAdjacentHTML(\\n\\t\\t\\t\\\"beforeEnd\\\",\\n\\t\\t\\t`<div id=${MYUID} class=box>` +\\n\\t\\t\\t\\\"<div class=head>\\\" +\\n\\t\\t\\t`<span class=title>${title}</span>` +\\n\\t\\t\\t\\\"<span class=close>X</span>\\\" +\\n\\t\\t\\t\\\"</div>\\\" +\\n\\t\\t\\t`<div class=body>${content}</div>` +\\n\\t\\t\\t\\\"</div>\\\"\\n\\t\\t);\\n\\n\\t\\t// A reference to the box div we just added.\\n\\t\\tconst box = doc.getElementById(MYUID);\\n\\n\\t\\t// Initial position of the box.\\n\\t\\tbox.style.left = \\\"1700px\\\";\\n\\t\\tbox.style.top = \\\"1px\\\";\\n\\n\\t\\t// The closing function.  Close the box after clicking on the \\\"X\\\".\\n\\t\\tbox.querySelector(\\\".close\\\").addEventListener(\\\"click\\\", () => { box.remove() });\\n\\n\\t\\treturn box;\\n\\t}\\n}\\n\\n\",\"filename\":\"test.js\",\"server\":\"home\"}}],[\"x2.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.tprint(crypto.randomUUID())\\n}\",\"filename\":\"x2.js\",\"server\":\"home\"}}],[\"y2.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\nconst doc=eval('document');\\nlet target=ns.args[0];\\nlet name=target;\\nlet root=ns.hasRootAccess(target);\\nlet ram=ns.getServerMaxRam(target);\\nlet ports=ns.getServerNumPortsRequired(target);\\nlet goto=\\\"\\\"\\n  let path=[target]\\n  while(path[0]!==\\\"home\\\") path.unshift(ns.scan(path[0])[0])\\n  goto=path.join(\\\";connect \\\");\\nconst terminal=doc.getElementById('terminal');\\nterminal.innerHTML+=`<a class='nothing' title='${name}'\\n       onClick=\\\"(function()\\n          {\\n              const terminalInput = document.getElementById('terminal-input');\\n              terminalInput.value='${goto}';                  \\n              const handler = Object.keys(terminalInput)[1];\\n              terminalInput[handler].onChange({target:terminalInput});\\n              terminalInput[handler].onKeyDown({key:'Enter',preventDefault:()=>null});\\n          })();\\\"\\n          style='color:lime;font-size: 16px;'><pre>\\n${name}\\n  ┣-${root}\\n  ┣-${ports}\\n  ┣-${ram}</pre></a>`\\n}\",\"filename\":\"y2.js\",\"server\":\"home\"}}],[\"z2.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// You may have to manually read through the code and uncomment certain things...\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\tlet flagList = ns.flags([\\r\\n\\t\\t[\\\"help\\\", false],\\r\\n\\t\\t[\\\"batch\\\", \\\"\\\"],\\r\\n\\t\\t[\\\"fromServer\\\", ns.getHostname()],\\r\\n\\t\\t[\\\"arg\\\", []],\\r\\n\\t\\t[\\\"terminalLog\\\", false]\\r\\n\\t])\\r\\n\\tfunction log(Node) {\\r\\n\\t\\tif (flagList.terminalLog) {\\r\\n\\t\\t\\tns.tprintRaw(Node);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tns.printRaw(Node);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tconsole.log(flagList.ee)\\r\\n\\tif (flagList.help || !flagList.batch || flagList.batch === {undefined}) {\\r\\n\\t\\tconst cyan = \\\"\\\\u001b[36m\\\";\\r\\n\\t\\tconst green = \\\"\\\\u001b[32m\\\";\\r\\n\\t\\tconst red = \\\"\\\\u001b[31m\\\";\\r\\n\\t\\tconst reset = \\\"\\\\u001b[0m\\\"\\r\\n\\r\\n\\t\\tns.tprint(`This program runs batch files.`)\\r\\n\\t\\tns.tprint(`Example Usage: > run ${ns.getScriptName()} --batch (insert path from root to file here)`)\\r\\n\\t\\tns.tprint(`There are a lot of flags!`)\\r\\n\\t\\tns.exit();\\r\\n\\t}\\r\\n\\tns.disableLog(\\\"ALL\\\")\\r\\n\\tif (!flagList.terminalLog) {\\r\\n\\t\\tns.setTitle(React.createElement(\\\"h6\\\", {title: `BATCH: ${flagList.fromServer}: ${flagList.batch} `, style:{display:\\\"flex\\\", alignItems: \\\"center\\\", marginTop: \\\"-1.2em\\\", marginBottom: \\\"-1.2em\\\", lineHeight: 1, fontSize: \\\"1.4em\\\", }}, React.createElement(\\\"span\\\", {style:{color:\\\"orange\\\"}}, \\\"BATCH: \\\"), React.createElement(\\\"h6\\\", {style:{color:ns.ui.getTheme().primary, marginLeft: \\\"0.5em\\\"}}, `${flagList.fromServer}: ${flagList.batch}`)))\\r\\n\\t\\tns.tail()\\r\\n\\t}\\r\\n\\t\\r\\n\\t//flagList.batch = toString(flagList.batch);\\r\\n\\t//flagList.fromServer = toString(flagList.fromServer);\\r\\n\\t/**@type {string} */\\r\\n\\tlet batch;\\r\\n\\tif (flagList.fromServer === ns.getHostname()) {\\r\\n\\t\\tbatch = ns.read(flagList.batch)\\r\\n\\t} else {\\r\\n\\t\\tlet originalContents = ns.read(flagList.batch);\\r\\n\\t\\tlet didFileExist = ns.fileExists(flagList.batch);\\r\\n\\t\\t// ns.scp is so annoying. why cant i specify which directory the files get put in and their new names are?\\r\\n\\t\\tns.scp(flagList.batch, ns.getHostname(), flagList.fromServer);\\r\\n\\t\\tbatch = ns.read(flagList.batch)\\r\\n\\t\\tif (didFileExist) {\\r\\n\\t\\t\\tns.write(flagList.batch, originalContents, \\\"w\\\");\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tns.tprint(batch)\\r\\n\\r\\n\\t// Begin to run commands lol.\\r\\n\\tconst storage = {}; // Object to store values\\r\\n\\t\\r\\n\\tasync function processCommand(command) {\\r\\n\\t\\tconst args = [];\\r\\n\\t\\tlet currentArg = '';\\r\\n\\t\\tlet currentArgIsStored = false;\\r\\n\\r\\n\\t\\tlet inQuotes = false;\\r\\n\\r\\n\\t\\tfor (let i = 0; i < command.length; i++) {\\r\\n\\t\\t\\tconst char = command[i];\\r\\n\\r\\n\\t\\t\\tif (char === ' ' && !inQuotes) {\\r\\n\\t\\t\\t\\t// Space outside quotes indicates the end of an argument\\r\\n\\t\\t\\t\\tif (currentArg.length > 0) {\\r\\n\\t\\t\\t\\t\\tif (currentArgIsStored) {\\r\\n\\t\\t\\t\\t\\t\\targs.push(storage[currentArg])\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\targs.push(currentArg)\\r\\n\\t\\t\\t\\t\\t};\\r\\n\\t\\t\\t\\t\\tcurrentArg = '';\\r\\n\\t\\t\\t\\t\\tcurrentArgIsStored = false;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t} else if (char === ':' && currentArg === '' && !currentArgIsStored) {\\r\\n\\t\\t\\t\\tcurrentArgIsStored = true;\\r\\n\\t\\t\\t}\\telse if (char === '\\\"') {\\r\\n\\t\\t\\t\\t// Toggle the inQuotes flag when encountering a double quote\\r\\n\\t\\t\\t\\tinQuotes = !inQuotes;\\r\\n\\t\\t\\t} else if (char === '\\\\\\\\') {\\r\\n\\t\\t\\t\\ti++\\r\\n\\t\\t\\t\\tconst char = command[i];\\r\\n\\t\\t\\t\\tconsole.log(char)\\r\\n\\t\\t\\t\\tif (char === \\\"'\\\") {\\r\\n\\t\\t\\t\\t\\tcurrentArg += '\\\"'\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tcurrentArg += char;\\r\\n\\t\\t\\t\\t\\tif (char === '\\\"') {\\r\\n\\t\\t\\t\\t\\t\\tinQuotes = !inQuotes\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t// Append the character to the current argument\\r\\n\\t\\t\\t\\tcurrentArg += char;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tconsole.log(args)\\r\\n\\r\\n\\t\\t// Add the last argument if it exists\\r\\n\\t\\tif (currentArg.length > 0) {\\r\\n\\t\\t\\tif (currentArgIsStored) {\\r\\n\\t\\t\\t\\targs.push(storage[currentArg])\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\targs.push(currentArg);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Handle special cases\\r\\n\\t\\t/*for (let i = 1; i < args.length; i++) {\\r\\n\\t\\t\\tif (args[i].startsWith(':')) {\\r\\n\\t\\t\\t\\targs[i] = toString(storage[args[i].slice(1)]);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}*/\\r\\n\\r\\n\\t\\t// Store or execute commands\\r\\n\\t\\tconsole.log(args[0])\\r\\n\\t\\tswitch (args[0]) {\\r\\n\\t\\t\\tcase 'scan':\\r\\n\\t\\t\\t\\tlet br = () => React.createElement(\\\"br\\\", null)\\r\\n\\t\\t\\t\\t// Handle scan command\\r\\n\\t\\t\\t\\tlet curServ;\\r\\n\\t\\t\\t\\t// Uncomment next line to run scan on the current server, otherwise, it will run in the server that this script is located in\\r\\n\\t\\t\\t\\t//curServ = ns.singularity.getCurrentServer\\r\\n\\t\\t\\t\\tlet scanList = ns.scan(curServ)\\r\\n\\t\\t\\t\\tlet serverNodes = []\\r\\n\\t\\t\\t\\tscanList.forEach(function (val, ind, arr) {\\r\\n\\t\\t\\t\\t\\tserverNodes.push(val);\\r\\n\\t\\t\\t\\t\\tserverNodes.push(br())\\r\\n\\t\\t\\t\\t})\\r\\n\\t\\t\\t\\tlet ipNodes = []\\r\\n\\t\\t\\t\\tscanList.forEach(function(val){\\r\\n\\t\\t\\t\\t\\t// Comment out next line if you dont need this functionality.\\r\\n\\t\\t\\t\\t\\tlet servInfo = ns.getServer(val)\\r\\n\\t\\t\\t\\t\\tif (servInfo) {\\r\\n\\t\\t\\t\\t\\t\\tipNodes.push(servInfo.ip);\\r\\n\\t\\t\\t\\t\\t\\tipNodes.push(br())\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\t\\tipNodes.push(\\\"DISABLED\\\");\\r\\n\\t\\t\\t\\t\\t\\tipNodes.push(br())\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t})\\r\\n\\t\\t\\t\\tlet rootNodes = []\\r\\n\\t\\t\\t\\tscanList.forEach(function(val){\\r\\n\\t\\t\\t\\t\\t// Comment out next line if you dont need this functionality.\\r\\n\\t\\t\\t\\t\\tlet servInfo = ns.getServer(val)\\r\\n\\t\\t\\t\\t\\tif (servInfo) {\\r\\n\\t\\t\\t\\t\\t\\trootNodes.push(servInfo.hasAdminRights ? \\\"Y\\\" : \\\"N\\\");\\r\\n\\t\\t\\t\\t\\t\\trootNodes.push(br())\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\telse {\\r\\n\\t\\t\\t\\t\\t\\trootNodes.push(\\\"DISABLED\\\");\\r\\n\\t\\t\\t\\t\\t\\trootNodes.push(br())\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t})\\r\\n\\t\\t\\t\\tJSON.stringify(ns.scan())\\r\\n\\t\\t\\t\\t// i sure do love using react\\r\\n\\t\\t\\t\\tlog(React.createElement(\\\"span\\\", null, \\r\\n\\t\\t\\t\\t\\tReact.createElement(\\\"span\\\", { style: { color: \\\"orange\\\" } }, \\\"BATCH (at scan): \\\"), \\r\\n\\t\\t\\t\\t\\tbr(),\\r\\n\\t\\t\\t\\t\\tReact.createElement(\\\"div\\\", {style: {display: \\\"flex\\\"}},\\r\\n\\t\\t\\t\\t\\t\\tReact.createElement(\\\"div\\\", {style:{marginRight: \\\"10px\\\"}}, \\\"Hostname\\\", br(), ...serverNodes),\\r\\n\\t\\t\\t\\t\\t\\tReact.createElement(\\\"div\\\", {style:{marginRight: \\\"10px\\\"}}, \\\"IP\\\", br(), ...ipNodes),\\r\\n\\t\\t\\t\\t\\t\\tReact.createElement(\\\"div\\\", {style:{marginRight: \\\"10px\\\"}}, \\\"Root Access\\\", br(), ...rootNodes)\\r\\n\\t\\t\\t\\t\\t),\\r\\n\\t\\t\\t\\t ))\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'hack':\\r\\n\\t\\t\\t\\t// Handle hack command\\r\\n\\t\\t\\t\\t//console.log('Hacking:', args[1]);\\r\\n\\t\\t\\t\\tlog(React.createElement(\\\"span\\\", null, React.createElement(\\\"span\\\", { style: { color: \\\"orange\\\" } }, \\\"BATCH (at hack): \\\"), `Hacking server: ${args[1]}`))\\r\\n\\t\\t\\t\\t// comment out next line if you wanna save ram.\\r\\n\\t\\t\\t\\tawait ns.hack(args[1]);\\r\\n\\t\\t\\t\\tlog(React.createElement(\\\"span\\\", null, React.createElement(\\\"span\\\", { style: { color: \\\"orange\\\" } }, \\\"BATCH (at hack): \\\"), `Finished hacking server: ${args[1]}`))\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'connect':\\r\\n\\t\\t\\t\\t/** Uncomment the next line if you want the connect command. I won't because it uses too much ram.\\r\\n\\t\\t\\t\\t * ns.singularity.connect(args[1])\\r\\n\\t\\t\\t\\t */\\r\\n\\t\\t\\t\\tlog(React.createElement(\\\"span\\\", null, React.createElement(\\\"span\\\", { style: { color: \\\"orange\\\" } }, \\\"BATCH (at connect): \\\"), `Connecting to server: ${args[1]}`))\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'print':\\r\\n\\t\\t\\t\\t// Handle print command\\r\\n\\t\\t\\t\\tlog(React.createElement(\\\"span\\\", null, React.createElement(\\\"span\\\", { style: { color: \\\"orange\\\" } }, \\\"BATCH (at print): \\\"), args[1]))\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'store':\\r\\n\\t\\t\\t\\t// Handle store command\\r\\n\\t\\t\\t\\tstorage[args[1]] = args[2];\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'prompt':\\r\\n\\t\\t\\t\\tstorage[args[2]] = await ns.prompt(args[1], {type: \\\"text\\\"})\\r\\n\\t\\t\\t\\tawait ns.asleep(300)\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'dropdown':\\r\\n\\t\\t\\t\\tstorage[args[3]] = await ns.prompt(args[1], {type: \\\"select\\\", choices: Array.from(JSON.parse(args[2]))})\\r\\n\\t\\t\\t\\tawait ns.asleep(300)\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'confirm':\\r\\n\\t\\t\\t\\tstorage[args[2]] = (await ns.prompt(args[1])) ? \\\"true\\\" : \\\"false\\\"\\r\\n\\t\\t\\t\\tawait ns.asleep(300)\\r\\n\\t\\t\\t\\tbreak; \\r\\n\\t\\t\\tcase 'wait':\\r\\n\\t\\t\\t\\tawait ns.asleep(Number(args[1]))\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'if':\\r\\n\\t\\t\\t\\t// create new scope\\r\\n\\t\\t\\t\\tif (true) {\\r\\n\\t\\t\\t\\t\\tlet argsCount = 2;\\r\\n\\t\\t\\t\\t\\tif (args[1] != \\\"false\\\" && args[1]) {\\r\\n\\t\\t\\t\\t\\t\\tawait parseInput(args[2])\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tfor (;argsCount < args.length;argsCount++) {\\r\\n\\t\\t\\t\\t\\t\\tif (args[argsCount] === \\\"else\\\") {\\r\\n\\t\\t\\t\\t\\t\\t\\tawait parseInput(args[argsCount + 1] ?? \\\"\\\")\\r\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tif (args[argsCount] === \\\"elseif\\\" || args[argsCount] === \\\"elif\\\") {\\r\\n\\t\\t\\t\\t\\t\\t\\tif (args[argsCount + 1] != \\\"false\\\" && args[argsCount + 1]) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tawait parseInput(args[argsCount + 2] ?? \\\"\\\")\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'logic':\\r\\n\\t\\t\\t\\tswitch (args[1]) {\\r\\n\\t\\t\\t\\t\\tcase 'not':\\r\\n\\t\\t\\t\\t\\t\\tif (!args[3]) {\\r\\n\\t\\t\\t\\t\\t\\t\\tthrow new Error(\\\"Args 3 on logic not must be a variable name\\\")\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tif (args[2] == \\\"false\\\") {\\r\\n\\t\\t\\t\\t\\t\\t\\tstorage[args[3]] = \\\"true\\\"\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\t\\tstorage[args[3]] = \\\"false\\\"\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\tcase 'and':\\r\\n\\t\\t\\t\\t\\t\\tif (!args[4]) {\\r\\n\\t\\t\\t\\t\\t\\t\\tthrow new Error(\\\"Args 4 on logic and must be a variable name\\\")\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tif (args[2] != \\\"false\\\" && args[3] != \\\"false\\\") {\\r\\n\\t\\t\\t\\t\\t\\t\\tstorage[args[4]] = \\\"true\\\"\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\t\\tstorage[args[4]] = \\\"false\\\"\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\tcase 'or':\\r\\n\\t\\t\\t\\t\\t\\tif (!args[4]) {\\r\\n\\t\\t\\t\\t\\t\\t\\tthrow new Error(\\\"Args 4 on logic or must be a variable name\\\")\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tif (args[2] != \\\"false\\\" || args[3] != \\\"false\\\") {\\r\\n\\t\\t\\t\\t\\t\\t\\tstorage[args[4]] = \\\"true\\\"\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\t\\tstorage[args[4]] = \\\"false\\\"\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t\\tcase 'xor':\\r\\n\\t\\t\\t\\t\\t\\tif (!args[4]) {\\r\\n\\t\\t\\t\\t\\t\\t\\tthrow new Error(\\\"Args 4 on logic xor must be a variable name\\\")\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tif (args[2] != \\\"false\\\" && args[3] == \\\"false\\\") {\\r\\n\\t\\t\\t\\t\\t\\t\\tstorage[args[4]] = \\\"true\\\"\\r\\n\\t\\t\\t\\t\\t\\t}\\telse if (args[2] == \\\"false\\\" && args[3] != \\\"false\\\") {\\r\\n\\t\\t\\t\\t\\t\\t\\tstorage[args[4]] = \\\"true\\\"\\r\\n\\t\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\t\\tstorage[args[4]] = \\\"false\\\"\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'batch':\\r\\n\\t\\t\\t\\t// procces input args 1 here\\r\\n\\t\\t\\t\\tlet value = await parseInput(args[1]);\\r\\n\\t\\t\\t\\tif (value && value.type === \\\"return\\\" && args[2]) {\\r\\n\\t\\t\\t\\t\\tstorage[args[2]] = value.value\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'exit':\\r\\n\\t\\t\\t\\tlog(React.createElement(\\\"span\\\", null, React.createElement(\\\"span\\\", { style: { color: \\\"orange\\\" } }, \\\"BATCH (at exit): \\\"), `Program Exited.`))\\r\\n\\t\\t\\t\\tns.exit()\\r\\n\\t\\t\\tcase 'return':\\r\\n\\t\\t\\t\\treturn {\\r\\n\\t\\t\\t\\t\\ttype: \\\"return\\\",\\r\\n\\t\\t\\t\\t\\tvalue: args[1],\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\tcase 'arg':\\r\\n\\t\\t\\t\\tstorage[args[2]] = toString((flagList.arg[args[1]] ?? \\\"\\\"))\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'read':\\r\\n\\t\\t\\t\\tstorage[args[2]] = ns.read(args[1])\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'write':\\r\\n\\t\\t\\t\\tlog(React.createElement(\\\"span\\\", null, React.createElement(\\\"span\\\", { style: { color: \\\"orange\\\" } }, \\\"BATCH (at write): \\\"), `Overwriting file ${args[1]} on server ${ns.getHostname()}`))\\r\\n\\t\\t\\t\\tns.write(args[1], args[2], \\\"w\\\")\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'append':\\r\\n\\t\\t\\t\\tlog(React.createElement(\\\"span\\\", null, React.createElement(\\\"span\\\", { style: { color: \\\"orange\\\" } }, \\\"BATCH (at append): \\\"), `Appending text to file ${args[1]} on server ${ns.getHostname()}`))\\r\\n\\t\\t\\t\\tns.write(args[1], args[2], \\\"a\\\")\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'nano':\\r\\n\\t\\t\\tcase 'vim':\\r\\n\\t\\t\\t\\t// filepath regex\\r\\n\\t\\t\\t\\t//let regex = new RegExp(`^(?<directory>(?:[^/\\\\*\\\\?\\\\[\\\\]!\\\\\\\\~\\\\|#\\\"' ]+\\\\/)*)(?<file>[^/\\\\*\\\\?\\\\[\\\\]!\\\\\\\\~\\\\|#\\\"' ]+\\\\.[^/\\\\*\\\\?\\\\[\\\\]!\\\\\\\\~\\\\|#\\\"' ]+)$`)\\r\\n\\t\\t\\t\\tlet pathOk = /*regex.test(args[1]) &&*/ (args[1].endsWith(\\\".js\\\") || args[1].endsWith(\\\".txt\\\"))\\r\\n\\t\\t\\t\\tif (!pathOk) {\\r\\n\\t\\t\\t\\t\\tthrow new Error(`Arg 1 on ${args[0]} should be a valid filepath ending with .js or .txt`)\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tlet filetype = args[1].endsWith(\\\".js\\\") ? \\\"js\\\" : (args[1].endsWith(\\\".bat.txt\\\") ? \\\"batch\\\" : (args[1].endsWith(\\\".txt\\\") ? \\\"txt\\\" : \\\"not a file\\\"))\\r\\n\\t\\t\\t\\tlet defaultText = \\\"\\\"\\r\\n\\t\\t\\t\\tif (filetype === \\\"js\\\") {\\r\\n\\t\\t\\t\\t\\tdefaultText = `/* Script Editor opened with BATCH */\\\\n\\\\n/** @param {NS} ns */\\\\nexport async function main(ns) {\\\\nns.print(\\\"Hello, World\\\")\\\\n}`\\r\\n\\t\\t\\t\\t} else if (filetype === \\\"batch\\\") {\\r\\n\\t\\t\\t\\t\\tdefaultText = `comment \\\"Script Editor opened with BATCH\\\";\\\\nprint \\\"Hello, World!\\\";`\\r\\n\\t\\t\\t\\t} else if (filetype === \\\"txt\\\") {\\r\\n\\t\\t\\t\\t\\tdefaultText = `Script Editor opened with BATCH\\\\n\\\\nThis is an example text file.`\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tlet isVim = args[0] == \\\"vim\\\"\\r\\n\\t\\t\\t\\tasync function openThingy() {\\r\\n\\t\\t\\t\\t\\tconst orig = React.createElement;\\r\\n\\t\\t\\t\\t\\tconst origState = React.useState;\\r\\n\\t\\t\\t\\t\\tlet stateCalls = 0;\\r\\n\\t\\t\\t\\t\\tlet resolve;\\r\\n\\t\\t\\t\\t\\tconst nextLevelHook = (callNumber, fn, parentThis, parentArgs) => {\\r\\n\\t\\t\\t\\t\\t\\tReact.createElement = orig;\\r\\n\\t\\t\\t\\t\\t\\tconst wrapped = new Proxy(fn, {\\r\\n\\t\\t\\t\\t\\t\\t\\tapply(target, thisArg, args_) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tif (stateCalls === 0) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tReact.useState = function (...args) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tstateCalls++;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tconst state = origState.call(this, ...args);\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (stateCalls === callNumber) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tresolve(state);\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tReact.useState = origState;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\treturn state;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t\\t\\treturn target.apply(thisArg, args_);\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t});\\r\\n\\t\\t\\t\\t\\t\\treturn orig.call(parentThis, wrapped, ...parentArgs.slice(1));\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tReact.createElement = function (...args) {\\r\\n\\t\\t\\t\\t\\t\\tconst fn = args[0];\\r\\n\\t\\t\\t\\t\\t\\tconst stringFn = (typeof fn === \\\"function\\\") ? String(fn) : null;\\r\\n\\t\\t\\t\\t\\t\\tif (stringFn?.includes(\\\"Trying to go to a page without the proper setup\\\")) {\\r\\n\\t\\t\\t\\t\\t\\t\\treturn nextLevelHook(2, fn, this, args);\\r\\n\\t\\t\\t\\t\\t\\t} else if (stringFn?.includes(\\\"Routing is currently disabled\\\")) {\\r\\n\\t\\t\\t\\t\\t\\t\\treturn nextLevelHook(1, fn, this, args);\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\treturn orig.call(this, ...args);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tconst resultP = Promise.race([\\r\\n\\t\\t\\t\\t\\t\\tnew Promise((res) => resolve = res),\\r\\n\\t\\t\\t\\t\\t\\tns.asleep(5000).then(() => { throw Error(\\\"Something unknown went wrong while running exploit\\\") })])\\r\\n\\t\\t\\t\\t\\t\\t.finally(() => {\\r\\n\\t\\t\\t\\t\\t\\t\\tReact.createElement = orig;\\r\\n\\t\\t\\t\\t\\t\\t\\tReact.useState = origState;\\r\\n\\t\\t\\t\\t\\t\\t});\\r\\n\\t\\t\\t\\t\\tns.ui.setTheme(ns.ui.getTheme());\\r\\n\\t\\t\\t\\t\\tconst [state, setState] = await resultP;\\r\\n\\t\\t\\t\\t\\tif (Array.isArray(state)) {\\r\\n\\t\\t\\t\\t\\t\\t// used to be \\\"Dev\\\"\\r\\n\\t\\t\\t\\t\\t\\t// used to be ...state\\r\\n\\t\\t\\t\\t\\t\\t// Mixed stuff so i dont forget what each property can be\\r\\n\\t\\t\\t\\t\\t\\tsetState([{ page: \\\"Script Editor\\\", location: {city: \\\"Sector-12\\\", name: \\\"Misc Location\\\", techVendorMinRam: 4, techVendorMaxRam: Math.pow(2, 20), infiltrationData: {maxClearanceLevel: 1, startingSecurityLevel: 10000}, costMult: 0, expMult: 1000, types: [\\\"Hospital\\\", \\\"Tech Vendor\\\", \\\"Slums\\\", \\\"Travel Agency\\\", \\\"Casino\\\", \\\"Special\\\"]}, faction: \\\"Daedalus\\\", files: new Map([[args[1], defaultText]]), options: {vim: isVim} }]);\\r\\n\\t\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\t\\tns.tprintf(\\\"Error while opening script editor.\\\");\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tlog(React.createElement(\\\"span\\\", null, React.createElement(\\\"span\\\", { style: { color: \\\"orange\\\" } }, `BATCH (at ${args[0]}): `), `Appending text to file ${args[1]} on server ${ns.getHostname()}`))\\r\\n\\t\\t\\t\\tawait ns.asleep(1200)\\r\\n\\t\\t\\t\\tawait openThingy()\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase 'is':\\r\\n\\t\\t\\t\\tswitch (args[1]) {\\r\\n\\t\\t\\t\\t\\tcase 'fileExists':\\r\\n\\t\\t\\t\\t\\t\\tstorage[args[4]] = ns.fileExists(args[2], args[3])\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\tcase 'comment':\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tdefault:\\r\\n\\t\\t\\t\\tthrow new Error(`Unknown or unrecognized command: ${args[0]}`)\\r\\n\\t\\t\\t//console.log('Unknown command:', args[0]);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t/**@param {string} input */\\r\\n\\tasync function parseInput(input) {\\r\\n\\t\\tconst commands = [];\\r\\n\\t\\tlet currentCommand = ''//input.split(';');\\r\\n\\t\\tfor (let i = 0; i < input.length; i++) {\\r\\n\\t\\t\\tif (input[i] === \\\"\\\\\\\\\\\") {\\r\\n\\t\\t\\t\\tif (input[i + 1] === \\\";\\\") {\\r\\n\\t\\t\\t\\t\\tcurrentCommand += \\\";\\\"\\r\\n\\t\\t\\t\\t\\ti++\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t} else if (input[i] === \\\";\\\") {\\r\\n\\t\\t\\t\\tif (currentCommand.length > 0) {\\r\\n\\t\\t\\t\\t\\tcommands.push(currentCommand)\\r\\n\\t\\t\\t\\t\\tcurrentCommand = ''\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tcurrentCommand += input[i]\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif (currentCommand.length > 0) {\\r\\n\\t\\t\\tcommands.push(currentCommand)\\r\\n\\t\\t\\tcurrentCommand = ''\\r\\n\\t\\t}\\r\\n\\t\\tconsole.log(commands)\\r\\n\\r\\n\\t\\tfor (let i = 0; i < commands.length; i++) {\\r\\n\\t\\t\\tconst command = commands[i].trim();\\r\\n\\t\\t\\tif (command.length > 0) {\\r\\n\\t\\t\\t\\tlet value = await processCommand(command);\\r\\n\\t\\t\\t\\tif (value && value.type === \\\"return\\\") {\\r\\n\\t\\t\\t\\t\\t// make return work here\\r\\n\\t\\t\\t\\t\\treturn value;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tawait parseInput(batch);\\r\\n\\tawait ns.asleep(1500); ns.closeTail()\\r\\n}\",\"filename\":\"z2.js\",\"server\":\"home\"}}],[\"link.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/* link.js - 1.6gb - v1.0.0 - Link test code */\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n    /**\\n     * addCSS: Add custom CSS to the document.\\n     **/\\n    function addCSS () {\\n        const doc = eval(\\\"document\\\");  // NetScript 'document' replacement object.\\n        // NOTE: To avoid styling conflicts, please use a different ID for the customStyleName variable if you copy this code.\\n        const customStyleName = \\\"rCustomStyles\\\";\\n        // Also, increment the version each time you change the CSS below, otherwise those changes won't override the current styling.\\n        const customStyleVersion = \\\"001\\\";\\n        let customStyles = doc.getElementById(customStyleName);  // To avoid styling conflicts, please use a different ID if you copy this code.\\n        if (!customStyles || customStyles.getAttribute(\\\"version\\\") < customStyleVersion) {  // If it doesn't already exist...\\n            // ...add some custom CSS to the page.\\n            if (!customStyles) {  // Create a new <style> element.\\n                customStyles = doc.createElement('style');\\n            } else {  // Clear out the existing <style> element.\\n                while (customStyles.firstChild) {\\n                    customStyles.removeChild(customStyles.firstChild);\\n                }\\n            }\\n            // Add custom CSS. (\\\\n = new line; \\\\t = tab)\\n            customStyles.appendChild(doc.createTextNode(\\n                       '.rLink {\\\\n'\\n                     + '    text-decoration: underline;\\\\n'\\n                     + '    cursor: pointer;\\\\n'\\n                     + '}\\\\n'\\n                     + '.rLink:hover {\\\\n'\\n                     + '    filter: brightness(1.5);\\\\n'\\n                     + '}\\\\n'\\n                     ));\\n            customStyles.id = customStyleName;\\n            customStyles.type = \\\"text/css\\\";\\n            customStyles.setAttribute(\\\"version\\\", customStyleVersion);\\n            doc.getElementsByTagName(\\\"head\\\")[0].appendChild(customStyles);  // Append the new CSS styling to the document.\\n        }\\n    }\\n\\n    /**\\n     * clone: Makes a new copy of an object.\\n     *\\n     * @param   {object}    obj  The object to be copied.\\n     * @returns {object}         The copy of the object.\\n     **/\\n    function clone (obj) {\\n        return JSON.parse(JSON.stringify(obj));\\n    }\\n\\n    /**\\n     * runTerminalCommand: Runs the given string in the terminal window.\\n     *\\n     * @param   {string}   command  A string with the terminal command(s) to run.\\n     * @returns {Promise}           Returns a Promise object.\\n     **/\\n    async function runTerminalCommand (command) {  // deepscan-ignore-line\\n        var terminalInput = eval(\\\"document\\\").getElementById(\\\"terminal-input\\\"), terminalEventHandlerKey = Object.keys(terminalInput)[1];\\n        terminalInput.value = command;\\n        terminalInput[terminalEventHandlerKey].onChange({ target: terminalInput });\\n        setTimeout(function (event) {\\n            terminalInput.focus();\\n            terminalInput[terminalEventHandlerKey].onKeyDown({ key: 'Enter', preventDefault: () => 0 });\\n        }, 0);\\n    };\\n\\n    const defaultStyle = {};  // Use this if you want a different default styling of React elements.\\n\\n    /**\\n     * rLinkCL: Create a React link element that runs commands on the command line.\\n     *\\n     * @param   {string}   text          The text shown in the link.\\n     * @param   {string}   command       The terminal command(s) to run when the link is clicked.\\n     * @param   {object=}  style         **(Optional)** An object containing pairs of CSS styling property names (in camel case) and their values.\\n     * @param   {string}   [altText=\\\"\\\"]  **(Optional)** Text visible when hovering the mouse over this element.\\n     * @returns {React.ReactNode}\\n     **/\\n    function rLinkCL (text, command, style = defaultStyle, altText = \\\"\\\") {\\n        var linkStyle = clone(defaultStyle);\\n        linkStyle = Object.assign(linkStyle, style);  // Merge the style parameter's values into the default styling.\\n        if (altText == \\\"\\\") {\\n            return React.createElement(\\\"a\\\", { style: linkStyle, className: \\\"rLink\\\",\\n                                   onClick: function (event) { runTerminalCommand(command); } }, text);\\n        } else {\\n            return React.createElement(\\\"a\\\", { style: linkStyle, className: \\\"rLink\\\", title: altText,\\n                                   onClick: function (event) { runTerminalCommand(command); } }, text);\\n        }\\n    }\\n\\n    /**\\n     * rText: Create a React text element.\\n     *\\n     * @param   {string}   text   The text to be shown in the span.\\n     * @param   {object=}  style  **(Optional)** An object containing pairs of CSS styling property names (in camel case) and their values.\\n     * @param   {string=}  id     **(Optional)** A unique HTML element ID.\\n     * @returns {React.ReactNode}\\n     **/\\n    function rText (text, style = defaultStyle, id = \\\"\\\") {\\n        var linkStyle = clone(defaultStyle);\\n        if (style != undefined) {\\n            linkStyle = Object.assign(linkStyle, style);  // Merge the style parameter's values into the default styling.\\n        }\\n        if (id == \\\"\\\" || id == undefined) {\\n            return React.createElement(\\\"span\\\", { style: linkStyle }, text);\\n        } else {\\n            return React.createElement(\\\"span\\\", { style: linkStyle, id: id }, text);\\n        }\\n    }\\n\\n    /**\\n     * rBreak: Create a React line break.\\n     *\\n     * @returns {React.ReactNode}\\n     **/\\n    function rBreak () {\\n        return React.createElement(\\\"br\\\", {}, undefined);\\n    }\\n\\n\\n    /* Main code */\\n    addCSS();\\n    // ns.tprintRaw([rBreak(), rText(\\\"Some text. \\\"), rBreak(), rText(\\\"\\\\tMore text.\\\", { color: \\\"yellow\\\" })]);\\n    ns.tprintRaw(rText([\\\"Test: \\\", rLinkCL(\\\"home\\\", \\\"home\\\"), \\\" | \\\", rLinkCL(\\\"n00dles\\\", \\\"home; connect n00dles\\\")], { color: \\\"rgb(200,200,200)\\\" }));\\n}\",\"filename\":\"link.js\",\"server\":\"home\"}}],[\"link2.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n    /**\\n     * addCSS: Add custom CSS to the document.\\n     **/\\n    function addCSS() {\\n        const doc = eval(\\\"document\\\");  // NetScript 'document' replacement object.\\n        // NOTE: To avoid styling conflicts, please use a different ID for the customStyleName variable if you copy this code.\\n        const customStyleName = \\\"aDifferentID\\\";\\n        // Also, increment the version each time you change the CSS below, otherwise those changes won't override the current styling.\\n        const customStyleVersion = \\\"002\\\";\\n        let customStyles = doc.getElementById(customStyleName);  // To avoid styling conflicts, please use a different ID if you copy this code.\\n        if (!customStyles || customStyles.getAttribute(\\\"version\\\") < customStyleVersion) {  // If it doesn't already exist...\\n            // ...add some custom CSS to the page.\\n            if (!customStyles) {  // Create a new <style> element.\\n                customStyles = doc.createElement('style');\\n            } else {  // Clear out the existing <style> element.\\n                while (customStyles.firstChild) {\\n                    customStyles.removeChild(customStyles.firstChild);\\n                }\\n            }\\n            // Add custom CSS. (\\\\n = new line; \\\\t = tab)\\n            customStyles.appendChild(doc.createTextNode(\\n                '.rLink {\\\\n'\\n                + '    text-decoration: underline;\\\\n'\\n                + '    cursor: pointer;\\\\n'\\n                + '}\\\\n'\\n                + '.rLink:hover {\\\\n'\\n                + '    filter: brightness(1.5);\\\\n'\\n                + '}\\\\n'\\n            ));\\n            customStyles.id = customStyleName;\\n            customStyles.type = \\\"text/css\\\";\\n            customStyles.setAttribute(\\\"version\\\", customStyleVersion);\\n            doc.getElementsByTagName(\\\"head\\\")[0].appendChild(customStyles);  // Append the new CSS styling to the document.\\n        }\\n    }\\n\\n    /**\\n     * clone: Makes a new copy of an object.\\n     *\\n     * @param   {object}    obj  The object to be copied.\\n     * @returns {object}         The copy of the object.\\n     **/\\n    function clone(obj) {\\n        return JSON.parse(JSON.stringify(obj));\\n    }\\n\\n    /**\\n     * runTerminalCommand: Runs the given string in the terminal window.\\n     *\\n     * @param   {string}   command  A string with the terminal command(s) to run.\\n     * @returns {Promise}           Returns a Promise object.\\n     **/\\n    async function runTerminalCommand(command) {  // deepscan-ignore-line\\n        var terminalInput = eval(\\\"document\\\").getElementById(\\\"terminal-input\\\"), terminalEventHandlerKey = Object.keys(terminalInput)[1];\\n        terminalInput.value = command;\\n        terminalInput[terminalEventHandlerKey].onChange({ target: terminalInput });\\n        setTimeout(function (event) {\\n            terminalInput.focus();\\n            terminalInput[terminalEventHandlerKey].onKeyDown({ key: 'Enter', preventDefault: () => 0 });\\n        }, 0);\\n    };\\n\\n    const defaultStyle = {};  // Use this if you want a different default styling of React elements.\\n\\n    /**\\n     * rLinkCL: Create a React link element that runs commands on the command line.\\n     *\\n     * @param   {string}   text          The text shown in the link.\\n     * @param   {string}   command       The terminal command(s) to run when the link is clicked.\\n     * @param   {object=}  style         **(Optional)** An object containing pairs of CSS styling property names (in camel case) and their values.\\n     * @param   {string}   [altText=\\\"\\\"]  **(Optional)** Text visible when hovering the mouse over this element.\\n     * @returns {React.ReactNode}\\n     **/\\n    function rLinkCL(text, command, style = defaultStyle, altText = \\\"\\\") {\\n        var linkStyle = clone(defaultStyle);\\n        linkStyle = Object.assign(linkStyle, style);  // Merge the style parameter's values into the default styling.\\n        if (altText == \\\"\\\") {\\n            return React.createElement(\\\"a\\\", {\\n                style: linkStyle, className: \\\"rLink\\\",\\n                onClick: function (event) { runTerminalCommand(command); }\\n            }, text);\\n        } else {\\n            return React.createElement(\\\"a\\\", {\\n                style: linkStyle, className: \\\"rLink\\\", title: altText,\\n                onClick: function (event) { runTerminalCommand(command); }\\n            }, text);\\n        }\\n    }\\n\\n    /**\\n     * rText: Create a React text element.\\n     *\\n     * @param   {string}   text   The text to be shown in the span.\\n     * @param   {object=}  style  **(Optional)** An object containing pairs of CSS styling property names (in camel case) and their values.\\n     * @param   {string=}  id     **(Optional)** A unique HTML element ID.\\n     * @returns {React.ReactNode}\\n     **/\\n    function rText(text, style = defaultStyle, id = \\\"\\\") {\\n        var linkStyle = clone(defaultStyle);\\n        if (style != undefined) {\\n            linkStyle = Object.assign(linkStyle, style);  // Merge the style parameter's values into the default styling.\\n        }\\n        if (id == \\\"\\\" || id == undefined) {\\n            return React.createElement(\\\"span\\\", { style: linkStyle }, text);\\n        } else {\\n            return React.createElement(\\\"span\\\", { style: linkStyle, id: id }, text);\\n        }\\n    }\\n\\n    /**\\n     * rBreak: Create a React line break.\\n     *\\n     * @returns {React.ReactNode}\\n     **/\\n    function rBreak() {\\n        return React.createElement(\\\"br\\\", {}, undefined);\\n    }\\n\\n    function gt(target) {\\n        let path = [target]\\n        while (path[0] !== \\\"home\\\") path.unshift(ns.scan(path[0])[0])\\n        return path.join(\\\";connect \\\")\\n    }\\n    function al(target,goto,symb,spacer){\\n        let root=\\\"\\\"\\n        if(ns.hasRootAccess(target)) root=\\\"YES\\\"\\n        else root=\\\"NO\\\" \\n        return [rText([symb, [rLinkCL(target, goto, defaultStyle, goto)]], { color: \\\"light green\\\" }), rBreak(),\\n    rText([spacer, \\\"  Root Access: \\\", root, \\\", Required hacking skill: \\\", ns.getServerRequiredHackingLevel(target)], { color: \\\"light green\\\" }), rBreak(),\\n    rText([spacer, \\\"  Number of open ports required to NUKE: \\\", ns.getServerNumPortsRequired(target)], { color: \\\"light green\\\" }), rBreak(),\\n    rText([spacer, \\\"  RAM: \\\", ns.formatRam(ns.getServerMaxRam(target))], { color: \\\"light green\\\" }), rBreak()]\\n    }\\n\\n    /* Main code */\\n    addCSS();\\n    let list = [\\\"home\\\"]\\n    let output = []\\n    let tempa = ns.scan(list[0])\\n    let spacer = \\\"  ┃\\\"\\n    let symb = \\\"┗ \\\"\\n    output.push(al(\\\"home\\\",\\\"home\\\",symb,spacer))\\n    for (let i = 0; i < tempa.length; i++) {\\n        if (!tempa[i].includes(\\\"server\\\")) {\\n            let goto = gt(tempa[i])\\n            list.push(tempa[i])\\n            if (ns.scan(tempa[i]).length > 1) {\\n                spacer += \\\" ┃ \\\"\\n            }\\n            symb = \\\"  ┣ \\\"\\n            if (tempa[i] == \\\"darkweb\\\") {\\n                symb = \\\"  ┗\\\"\\n                spacer = \\\"      \\\"\\n            }\\n            output.push(al(tempa[i],goto,symb,spacer))\\n            spacer = \\\"  ┃\\\"\\n        }\\n    }\\n    for (let i = 0; i < list.length; i++) {\\n        let temp = ns.scan(list[i])\\n        for (let j = 0; j < temp.length; j++) {\\n            if (!list.includes(temp[j]) && !temp[j].includes(\\\"hacknet\\\")) {\\n                let tempscan = ns.scan(temp[j])\\n                let parent = tempscan[0]\\n                list.splice(list.indexOf(parent) + ns.scan(parent).indexOf(temp[j]), 0, temp[j])\\n                let goto = gt(temp[j])\\n                spacer = \\\"\\\";\\n                symb = \\\"\\\";\\n                \\n                for (let k = 0; k < output[list.indexOf(parent)][6].props.children[0].length; k++) {                        \\n                    if (output[list.indexOf(parent)][6].props.children[0][k] == \\\"┃\\\") {\\n                        if (k == output[list.indexOf(parent)][6].props.children[0].lastIndexOf(\\\"┃\\\")) {\\n                            if (temp[j] == ns.scan(parent)[ns.scan(parent).length - 1]) {\\n                                symb += \\\"┗\\\"\\n                                spacer += \\\" \\\"\\n                            }\\n                            else {\\n                                symb += \\\"┣\\\"\\n                                spacer += \\\"┃\\\"\\n                            }\\n                        }\\n                        else {\\n                            symb += \\\"┃\\\"\\n                            spacer += \\\"┃\\\"\\n                        }\\n                    }\\n                    else {\\n                        spacer += \\\" \\\"\\n                        symb += \\\" \\\"\\n                    }\\n                }\\n                if (tempscan.length > 1) {\\n                    spacer += \\\" ┃ \\\"\\n                }\\n                output.splice(list.indexOf(parent) + ns.scan(parent).indexOf(temp[j]), 0,\\n                    al(temp[j],goto,symb,spacer)\\n                )\\n            }\\n        }\\n    }\\n    ns.tprintRaw(output)\\n}\",\"filename\":\"link2.js\",\"server\":\"home\"}}],[\"testGrowth.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** testen was growth ausspuckt */\\nexport async function main(ns) {\\n\\tns.print(\\\"\\\\n\\\".repeat(7));\\n\\tns.tail();\\n\\tns.disableLog('ALL');\\n\\t\\n\\tlet nachbarn = ns.scan(\\\"home\\\");\\n\\tfor (let child of nachbarn) {\\n\\t\\tlet space = 16 - child.length;\\n\\t\\tlet server = ns.getServer(child);\\n\\t\\tlet g = server.serverGrowth;\\n\\t\\tlet d = server.baseDifficulty;\\n\\t\\tlet serverGrowth = Math.min(1 + 0.03 / d, 1.0035) ^ (1 * (g / 100) * 1)\\n\\t\\t//  let serverGrowth = Math.min(1 + 0.03 / d, 1.0035) ^ (threads * (g / 100) * h)\\n\\t\\t//\\twhere h = player's grow() multiplier (out of 1), \\n\\t\\t// \\t\\td = the server's hack difficulty, and \\n\\t\\t// \\t\\tg = the server's growthRate Please correct me if I'm wrong \\n\\t\\tns.print(child + \\\" \\\".repeat(space) + \\\" Rate: \\\" + g + \\\"\\\\t\\\" + serverGrowth);\\n\\t}\\n\\n\\n}\",\"filename\":\"testGrowth.js\",\"server\":\"home\"}}],[\"killAll.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"ALL\\\");\\n\\tlet allServer = getServers();\\n\\tfor (let server of allServer) {\\n\\t\\tif (server !== ns.getHostname()) {\\n\\t\\t\\tns.killall(server, true);\\n\\t\\t}\\n\\t}\\n\\tns.killall(ns.getHostname());\\n\\n\\n\\tfunction getServers() {\\n\\t\\tlet visited = [];\\n\\t\\tlet speicher = ['home'];\\n\\n\\t\\t//solange noch was im speicher liegt\\n\\t\\twhile (speicher.length > 0) {\\n\\t\\t\\t//nehme ein element aus dem speicher\\n\\t\\t\\tlet node = speicher.shift();\\n\\n\\t\\t\\t//prüfe ob wir es noch nicht angeschaut haben\\n\\t\\t\\tif (!visited.includes(node)) {\\n\\t\\t\\t\\t//wenn ja, merke es als angeschaut\\n\\t\\t\\t\\tvisited.push(node);\\n\\n\\t\\t\\t\\t// alle nachbarn in den speicher legen\\n\\t\\t\\t\\tlet nachbarn = ns.scan(node);\\n\\t\\t\\t\\tfor (let child of nachbarn) {\\n\\t\\t\\t\\t\\tspeicher.push(child);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} // end while\\n\\n\\n\\t\\treturn visited;\\n\\t} // end getServers()\\n}\",\"filename\":\"killAll.js\",\"server\":\"home\"}}],[\"mon.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const flags = ns.flags([\\n        ['refreshrate', 200],\\n        ['help', false],\\n    ])\\n    if (flags._.length === 0 || flags.help) {\\n        ns.tprint(\\\"This script helps visualize the money and security of a server.\\\");\\n        ns.tprint(`USAGE: run ${ns.getScriptName()} SERVER_NAME`);\\n        ns.tprint(\\\"Example:\\\");\\n        ns.tprint(`> run ${ns.getScriptName()} n00dles`)\\n        return;\\n    }\\n    ns.tail();\\n    ns.disableLog('ALL');\\n    while (true) {\\n        const server = flags._[0];\\n        let money = ns.getServerMoneyAvailable(server);\\n        if (money === 0) money = 1;\\n        const maxMoney = ns.getServerMaxMoney(server);\\n        const minSec = ns.getServerMinSecurityLevel(server);\\n        const sec = ns.getServerSecurityLevel(server);\\n        ns.clearLog(server);\\n        ns.print(`${server}:`);\\n        ns.print(` $_______: ${ns.nFormat(money, \\\"$0.000a\\\")} / ${ns.nFormat(maxMoney, \\\"$0.000a\\\")} (${(money / maxMoney * 100).toFixed(2)}%)`);\\n        ns.print(` security: +${(sec - minSec).toFixed(2)}`);\\n        ns.print(` hack____: ${ns.tFormat(ns.getHackTime(server))} (t=${Math.ceil(ns.hackAnalyzeThreads(server, maxMoney/2))})`);\\n        ns.print(` grow____: ${ns.tFormat(ns.getGrowTime(server))} (t=${Math.ceil(ns.growthAnalyze(server, maxMoney / money))})`);\\n        ns.print(` weaken__: ${ns.tFormat(ns.getWeakenTime(server))} (t=${Math.ceil((sec - minSec) * 20)})`);\\n        await ns.sleep(flags.refreshrate);\\n    }\\n}\\n\\nexport function autocomplete(data, args) {\\n    return data.servers;\\n}\",\"filename\":\"mon.js\",\"server\":\"home\"}}],[\"lib.helpers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/* ----------------------------------------------------------------------- *//**\\n * eine Klasse um die konfiguration zu verwalten. \\n * \\n * in data werden die defaultwerte gesetzt\\n * @todo erstmal nur ein anonymer getter in setItem \\n * -------------------------------------------------------------------------- */\\nexport class settings {\\n\\t/**\\n\\t * defaultwerte\\n\\t */\\n\\tstatic #data = {\\n\\t\\treservedHomeRam: 8,\\n\\t\\ttarget: 'n00dles',\\n\\t\\tbotnetName: 'botnet',\\n\\t\\tfiles: {\\n\\t\\t\\t'basis': 'basis.js',\\n\\t\\t\\t'growing': 'bin.grow.js',\\n\\t\\t\\t'hacking': 'bin.hack.js',\\n\\t\\t\\t'weaking': 'bin.weak.js',\\n\\t\\t\\t'do': 'doProcess.js',\\n\\t\\t\\t'git-init': 'git-init.js',\\n\\t\\t\\t'lib.helpers': 'lib.helpers.js',\\n\\t\\t\\t'lib.server': 'lib.server.js',\\n\\t\\t\\t'lib.starter': 'lib.starter.js',\\n\\t\\t\\t'spider': 'modul.spider.js',\\n\\t\\t\\t'mon': 'mon.js',\\n\\t\\t\\t'orig.lib.helpers': 'orig.lib.helpers.js'\\n\\t\\t},\\n\\t\\tspawnDelay: 50,\\n\\t\\tpref: 'ego_',\\n\\t}\\n\\n\\tstatic get reservedHomeRam() {\\n\\t\\tif (JSON.parse(localStorage.getItem(this.#data.pref + \\\"keys\\\")).indexOf(\\\"reservedHomeRam\\\") == -1) {\\n\\t\\t\\treturn this.#data.reservedHomeRam;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\treturn JSON.parse(localStorage.getItem(this.#data.pref + \\\"reservedHomeRam\\\"));\\n\\t\\t}\\n\\t}\\n\\n\\tstatic get target() {\\n\\t\\tif (JSON.parse(localStorage.getItem(this.#data.pref + \\\"keys\\\")).indexOf(\\\"target\\\") == -1) {\\n\\t\\t\\treturn this.#data.target;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\treturn JSON.parse(localStorage.getItem(this.#data.pref + \\\"target\\\"));\\n\\t\\t}\\n\\t}\\n\\n\\tstatic get botnet() {\\n\\t\\tif (JSON.parse(localStorage.getItem(this.#data.pref + \\\"keys\\\")).indexOf(\\\"botnet\\\") == -1) {\\n\\t\\t\\treturn this.#data.botnet;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\treturn JSON.parse(localStorage.getItem(this.#data.pref + \\\"botnet\\\"));\\n\\t\\t}\\n\\t}\\n\\tstatic get files() { return this.#data.files; }\\n\\tstatic get spawnDelay() {\\n\\t\\tif (JSON.parse(localStorage.getItem(this.#data.pref + \\\"keys\\\")).indexOf(\\\"spawnDelay\\\") == -1) {\\n\\t\\t\\treturn this.#data.spawnDelay;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\treturn JSON.parse(localStorage.getItem(this.#data.pref + \\\"spawnDelay\\\"));\\n\\t\\t}\\n\\t}\\n\\n\\n\\t/**\\n\\t * ruft einen wert gemäß **key** aus *localStorage* ab -> gibts den nicht \\n\\t * wird ein defaultwert (*data*) oder undefined geliefert \\n\\t * \\n\\t * @param {string} key schlüsselwort für KV-Speicher\\n\\t */\\n\\tstatic getItem(key) {\\n\\t\\tlet item = localStorage.getItem(this.#data.pref + key);\\n\\n\\t\\ttry {\\n\\t\\t\\titem = JSON.parse(item)\\n\\t\\t} catch (e) {\\n\\t\\t\\titem = this.#data[key]\\n\\t\\t}\\n\\n\\t\\treturn item ? item : undefined\\n\\t}\\n\\n\\t/**\\n\\t * setzt den wert (**value**) gemäß **key** im *localStorage*\\n\\t * \\n\\t * @param {string} key schlüsselwort für KV-Speicher\\n\\t * @param {object} value wert für KV-Speicher\\n\\t */\\n\\tstatic setItem(key, value) {\\n\\t\\tlocalStorage.setItem(this.#data.pref + key, JSON.stringify(value));\\n\\t\\tthis.#setMyKeys(key);\\n\\n\\t\\t// anonymer getter, ich bin gespannt auf die fehler die dadurch entstehen\\n\\t\\t// zumindest die beschreibung mit jsdoc wird darunter leiden\\n\\t\\tif (!this.hasOwnProperty(key)) {\\n\\t\\t\\tObject.defineProperty(this, key, {\\n\\t\\t\\t\\tget() {\\n\\t\\t\\t\\t\\treturn JSON.parse(localStorage.getItem(this.#data.pref + key));\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * löscht **key** aus *localStorage*\\n\\t * \\n\\t * @param {string} key schlüsselwort für KV-Speicher\\n\\t */\\n\\tstatic resetItem(key) {\\n\\t\\tlocalStorage.removeItem(key);\\n\\t\\tthis.#setMyKeys(key, true);\\n\\t}\\n\\n\\tstatic #setMyKeys(key, remove = false) {\\n\\t\\tlet newKeys = new Set(JSON.parse(localStorage.getItem(this.#data.pref + \\\"keys\\\")));\\n\\t\\tif (remove == true) {\\n\\t\\t\\tnewKeys.delete(key);\\n\\t\\t\\tlocalStorage.removeItem(this.#data.pref + key);\\n\\t\\t} else {\\n\\t\\t\\tnewKeys.add(key)\\n\\t\\t}\\n\\t\\tnewKeys = Array.from(newKeys);\\n\\t\\tlocalStorage.setItem(this.#data.pref + \\\"keys\\\", JSON.stringify(newKeys));\\n\\t}\\n}\\n\\nexport function timeStamp(time = 0) {\\n\\tif (!time) {\\n\\t\\ttime = new Date();\\n\\t} else {\\n\\t\\ttime = new Date(time);\\n\\t}\\n\\n\\treturn time.toLocaleTimeString() + \\\",\\\" + time.getMilliseconds();\\n}\\n\\nexport function terminal(ns, command) {\\n\\tconst doc = globalThis[\\\"document\\\"];\\n\\t// Acquire a reference to the terminal text field\\n\\tconst terminalInput = doc.getElementById(\\\"terminal-input\\\");\\n\\n\\t// Set the value to the command you want to run.\\n\\tterminalInput.value = command;\\n\\n\\t// Get a reference to the React event handler.\\n\\tconst handler = Object.keys(terminalInput)[1];\\n\\n\\t// Perform an onChange event to set some internal values.\\n\\tterminalInput[handler].onChange({ target: terminalInput });\\n\\n\\t// Simulate an enter press\\n\\tterminalInput[handler].onKeyDown({ key: 'Enter', preventDefault: () => null });\\n}\\n\\n/* ********************************************************************************\\n * ** hier folgt das minimum um doProcess.js nutzen zu können, \\n * ** danach folgt nur noch main. \\n * ** Alias:: alias do=\\\"run doProcess.js\\\"\\n * ** Quelle: https://github.com/jenheilemann/bitburner-scripts/blob/main/README.md\\n * ******************************************************************************** */\\n/** Evaluate an arbitrary ns command by writing it to a new script and then running or executing it.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, the evaluation result of the command is printed to the terminal\\n */\\nexport async function runCommand(ns, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n\\tns.tprint(args);\\n\\tcheckNsInstance(ns, '\\\"runCommand\\\"');\\n\\tif (!verbose) disableLogs(ns, ['run']);\\n\\treturn await runCommand_Custom(ns, ns.run, command, fileName, args, verbose, maxRetries, retryDelayMs);\\n}\\n/** @param {NS} ns \\n * Returns a helpful error message if we forgot to pass the ns instance to a function */\\nexport function checkNsInstance(ns, fnName = \\\"this function\\\") {\\n\\tif (ns === undefined || !ns.print) throw new Error(`The first argument to ${fnName} should be a 'ns' instance.`);\\n\\treturn ns;\\n}\\n/** @param {NS} ns **/\\nexport function disableLogs(ns, listOfLogs) { ['disableLog'].concat(...listOfLogs).forEach(log => checkNsInstance(ns, '\\\"disableLogs\\\"').disableLog(log)); }\\n/**\\n * An advanced version of runCommand that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnRun, fnWrite are implemented using another ns function you already reference elsewhere like ns.exec)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function runCommand_Custom(ns, fnRun, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n\\tcheckNsInstance(ns, '\\\"runCommand_Custom\\\"');\\n\\tif (!Array.isArray(args)) throw new Error(`args specified were a ${typeof args}, but an array is required.`);\\n\\tif (!verbose) disableLogs(ns, ['sleep']);\\n\\t// Auto-import any helpers that the temp script attempts to use\\n\\tconst required = getExports(ns).filter(e => command.includes(`${e}(`));\\n\\tlet script = (required.length > 0 ? `import { ${required.join(\\\", \\\")} } from 'helpers.js'\\\\n` : '') +\\n\\t\\t`export async function main(ns) { ${command} }`;\\n\\tfileName = fileName || `/Temp/${hashCode(command)}-command.js`;\\n\\tif (verbose)\\n\\t\\tlog(ns, `INFO: Using a temporary script (${fileName}) to execute the command:` +\\n\\t\\t\\t`\\\\n  ${command}\\\\nWith the following arguments:    ${JSON.stringify(args)}`);\\n\\t// It's possible for the file to be deleted while we're trying to execute it, so even wrap writing the file in a retry\\n\\treturn await autoRetry(ns, async () => {\\n\\t\\t// To improve performance, don't re-write the temp script if it's already in place with the correct contents.\\n\\t\\tconst oldContents = ns.read(fileName);\\n\\t\\tif (oldContents != script) {\\n\\t\\t\\tif (oldContents) // Create some noise if temp scripts are being created with the same name but different contents\\n\\t\\t\\t\\tns.tprint(`WARNING: Had to overwrite temp script ${fileName}\\\\nOld Contents:\\\\n${oldContents}\\\\nNew Contents:\\\\n${script}` +\\n\\t\\t\\t\\t\\t`\\\\nThis warning is generated as part of an effort to switch over to using only 'immutable' temp scripts. ` +\\n\\t\\t\\t\\t\\t`Please paste a screenshot in Discord at https://discord.com/channels/415207508303544321/935667531111342200`);\\n\\t\\t\\tns.write(fileName, script, \\\"w\\\");\\n\\t\\t\\t// Wait for the script to appear and be readable (game can be finicky on actually completing the write)\\n\\t\\t\\tawait autoRetry(ns, () => ns.read(fileName), c => c == script, () => `Temporary script ${fileName} is not available, ` +\\n\\t\\t\\t\\t`despite having written it. (Did a competing process delete or overwrite it?)`, maxRetries, retryDelayMs, undefined, verbose, verbose);\\n\\t\\t}\\n\\t\\t// Run the script, now that we're sure it is in place\\n\\t\\treturn fnRun(fileName, 1 /* Always 1 thread */, ...args);\\n\\t}, pid => pid !== 0,\\n\\t\\t() => `The temp script was not run (likely due to insufficient RAM).` +\\n\\t\\t\\t`\\\\n  Script:  ${fileName}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n\\t\\t\\t`\\\\nThe script that ran this will likely recover and try again later once you have more free ram.`,\\n\\t\\tmaxRetries, retryDelayMs, undefined, verbose, verbose);\\n}\\nconst _cachedExports = [];\\n/** @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @returns {string[]} The set of all funciton names exported by this file. */\\nfunction getExports(ns) {\\n\\tif (_cachedExports.length > 0) return _cachedExports;\\n\\tconst scriptHelpersRows = ns.read(getFilePath('helpers.js')).split(\\\"\\\\n\\\");\\n\\tfor (const row of scriptHelpersRows) {\\n\\t\\tif (!row.startsWith(\\\"export\\\")) continue;\\n\\t\\tconst funcNameStart = row.indexOf(\\\"function\\\") + \\\"function\\\".length + 1;\\n\\t\\tconst funcNameEnd = row.indexOf(\\\"(\\\", funcNameStart);\\n\\t\\t_cachedExports.push(row.substring(funcNameStart, funcNameEnd));\\n\\t}\\n\\treturn _cachedExports;\\n}\\n/** Gets the path for the given local file, taking into account optional subfolder relocation via git-pull.js **/\\nexport function getFilePath(file) {\\n\\tconst subfolder = '';  // git-pull.js optionally modifies this when downloading\\n\\treturn pathJoin(subfolder, file);\\n}\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nexport function pathJoin(...args) {\\n\\treturn args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n/** Helper to log a message, and optionally also tprint it and toast it\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function log(ns, message = \\\"\\\", alsoPrintToTerminal = false, toastStyle = \\\"\\\", maxToastLength = Number.MAX_SAFE_INTEGER) {\\n\\tcheckNsInstance(ns, '\\\"log\\\"');\\n\\tns.print(message);\\n\\tif (toastStyle) ns.toast(message.length <= maxToastLength ? message : message.substring(0, maxToastLength - 3) + \\\"...\\\", toastStyle);\\n\\tif (alsoPrintToTerminal) {\\n\\t\\tns.tprint(message);\\n\\t\\t// TODO: Find a way write things logged to the terminal to a \\\"permanent\\\" terminal log file, preferably without this becoming an async function.\\n\\t\\t//       Perhaps we copy logs to a port so that a separate script can optionally pop and append them to a file.\\n\\t\\t//ns.write(\\\"log.terminal.txt\\\", message + '\\\\n', 'a'); // Note: we should get away with not awaiting this promise since it's not a script file\\n\\t}\\n\\treturn message;\\n}\\n/** Helper to retry something that failed temporarily (can happen when e.g. we temporarily don't have enough RAM to run)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport async function autoRetry(ns, fnFunctionThatMayFail, fnSuccessCondition, errorContext = \\\"Success condition not met\\\",\\n\\tmaxRetries = 5, initialRetryDelayMs = 50, backoffRate = 3, verbose = false, tprintFatalErrors = true) {\\n\\tcheckNsInstance(ns, '\\\"autoRetry\\\"');\\n\\tlet retryDelayMs = initialRetryDelayMs, attempts = 0;\\n\\twhile (attempts++ <= maxRetries) {\\n\\t\\ttry {\\n\\t\\t\\tconst result = await fnFunctionThatMayFail()\\n\\t\\t\\tconst error = typeof errorContext === 'string' ? errorContext : errorContext();\\n\\t\\t\\tif (!fnSuccessCondition(result))\\n\\t\\t\\t\\tthrow asError(error);\\n\\t\\t\\treturn result;\\n\\t\\t}\\n\\t\\tcatch (error) {\\n\\t\\t\\tconst fatal = attempts >= maxRetries;\\n\\t\\t\\tlog(ns, `${fatal ? 'FAIL' : 'INFO'}: Attempt ${attempts} of ${maxRetries} failed` +\\n\\t\\t\\t\\t(fatal ? `: ${typeof error === 'string' ? error : error.message || JSON.stringify(error)}` : `. Trying again in ${retryDelayMs}ms...`),\\n\\t\\t\\t\\ttprintFatalErrors && fatal, !verbose ? undefined : (fatal ? 'error' : 'info'))\\n\\t\\t\\tif (fatal) throw asError(error);\\n\\t\\t\\tawait ns.sleep(retryDelayMs);\\n\\t\\t\\tretryDelayMs *= backoffRate;\\n\\t\\t}\\n\\t}\\n}\\n\\n\\n\\n/**\\n * nur zum ausprobieren der funktionen\\n */\\nexport function main(ns) {\\n\\tns.ui.clearTerminal()\\n\\tns.tail();\\n\\tns.print(\\\"_\\\".repeat(20));\\n\\t//ns.print(\\\"KEYS: \\\" + settings.getItem(\\\"keys\\\"));\\n\\t//ns.print(\\\"get_before: \\\" + settings.test);\\n\\t//settings.setItem('test', 12);\\n\\t//ns.print(\\\"get_after: \\\" + settings.test)\\n\\tns.print(settings.getItem('nextAction'));\\n\\tns.print(settings.getItem('lastAction'));\\n\\n\\tsettings.resetItem('lastAction');\\n\\t//settings.resetItem('reservedHomeRam');\\n\\n\\n\\t/** @todo aliasse realisieren\\n\\t\\t// connect to any server by name\\n\\t\\talias find=\\\"run find.js\\\"\\n\\n\\t\\t// get server data about what the best server to hack might be right now\\n\\t\\talias best=\\\"run bestHack.js\\\"\\n\\n\\t\\t// manipulate localStorage\\n\\t\\talias get=\\\"run lsGet.js\\\"\\n\\t\\talias set=\\\"run lsSet.js\\\"\\n\\n\\t\\t// force crime.js/workForFactions.js to stop, so you can play in-game\\n\\t\\talias working=\\\"run lsSet.js working\\\"\\n\\t\\talias done=\\\"run lsClear.js working\\\"\\n\\n\\t\\t// set a reserve amount manually, above reseved money for buying programs\\n\\t\\talias reserve=\\\"run lsSet.js reserve\\\"\\n\\t */\\n}\",\"filename\":\"lib.helpers.js\",\"server\":\"home\"}}],[\"testHackCalc.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\t//ns.tail();\\n\\tns.disableLog('ALL');\\n\\tns.print(\\\"\\\\n\\\".repeat(7));\\n\\tns.print(\\\"#\\\".repeat(40));\\n\\tlet server = \\\"n00dles\\\";\\n\\tlet server2 = \\\"foodnstuff\\\";\\n\\tconst maxMoney = ns.getServerMaxMoney(server);\\n\\tlet p = ns.getPlayer()\\n\\tlet x = ns.getServer(server2);\\n\\tx.moneyAvailable = x.moneyMax;\\n\\tx.hackDifficulty = 10//x.minDifficulty;\\n\\tns.tprint('times: H' + ffT(ns.formulas.hacking.hackTime(x, p)) +\\n\\t\\t' G' + ffT(ns.formulas.hacking.growTime(x, p)) +\\n\\t\\t' W' + ffT(ns.formulas.hacking.weakenTime(x, p)))\\n\\n\\t/**let hMoney = ns.formulas.hacking.hackPercent(x, p) * x.moneyAvailable\\n\\tlet hThreads = Math.ceil((x.moneyMax * .1) / hMoney)\\n\\tlet myMoney = hThreads + hMoney;\\n\\n\\tx.moneyAvailable = x.moneyMax - myMoney;\\n\\tlet gThreads = Math.ceil(ns.formulas.hacking.growThreads(x, p, x.maxMoney));\\n\\n\\tns.tprint(` MoneyGain :${myMoney} T:(${hThreads})  `);\\n\\t\\n\\t\\n\\thMoney = ns.formulas.hacking.hackPercent(x, p) * x.moneyAvailable\\n\\thThreads = Math.ceil((x.moneyMax * .1) / hMoney)\\n\\tmyMoney = hThreads + hMoney;\\n\\n\\tx.moneyAvailable = x.moneyMax - myMoney;\\n\\n\\tns.tprint(` MoneyGain :${myMoney} T:(${hThreads})  `);\\n\\t*/\\n\\tfor (let i = 0; i <100; i = i + 1) { \\n\\t\\tlet hPercent = ns.formulas.hacking.hackPercent(x, p)\\n\\t\\tlet hMoney =  hPercent* x.moneyAvailable\\n\\t\\tx.moneyAvailable = x.moneyAvailable - hMoney;\\n\\t\\tns.tprint(` MoneyGain :${hMoney} percent :${hPercent} gesamt :${x.moneyAvailable}  `);\\n\\t}\\n\\n\\n\\n\\n\\n\\tns.tprint(ffT(ns.formulas.hacking.hackTime(ns.getServer(server), p) * 4))\\n\\tlet time1, time2;\\n\\ttime1 = new Date().getTime()\\n\\tfor (let i = 0; i < 4; i++) {\\n\\t\\tawait ns.hack(server);\\n\\t\\tawait ns.sleep(5);\\n\\t}\\n\\ttime2 = new Date().getTime()\\n\\n\\tns.tprint(ffT(time2 - time1))\\n\\n\\n\\n\\t/*\\n\\tfor (let i = 5; i <= 95; i = i + 5) {\\n\\t\\tlet money = maxMoney * (i / 100);\\n\\t\\tlet hTime = ns.tFormat(ns.getHackTime(server), true);\\n\\t\\tlet gTime = ns.tFormat(ns.getGrowTime(server), true);\\n\\t\\tlet hThreads = Math.ceil(ns.hackAnalyzeThreads(server, money) * 100) / 100;\\n\\t\\tlet gThreads = Math.ceil(ns.growthAnalyze(server, maxMoney / (maxMoney - money)) * 100) / 100;\\n\\t\\tlet hSG = Math.ceil(ns.hackAnalyzeSecurity(hThreads, server) * 1000) / 1000;\\n\\t\\tlet gSG = Math.ceil(ns.growthAnalyzeSecurity(gThreads, server) * 1000) / 1000;\\n\\t\\n\\t\\tns.print(` hack ${i}% :  ${hTime} (t=${hThreads} s=${hSG})`);\\n\\t\\tns.print(` grow ${i}% : ${gTime} (t=${gThreads} s=${gSG})`);\\n\\t}\\n\\tns.formulas.hacking.growPercent\\n\\tns.formulas.hacking.growThreads\\n\\t\\n\\tns.formulas.hacking.hackChance\\n\\tns.formulas.hacking.hackExp\\n\\tns.formulas.hacking.hackPercent\\n\\t\\n\\tns.formulas.hacking.hackTime\\n\\tns.formulas.hacking.growTime\\n\\tns.formulas.hacking.weakenTime\\n\\t---------------------------------------\\n\\t  // Flag indicating whether this server has a backdoor installed by a player\\n  backdoorInstalled = false;\\n\\t\\n  // Initial server security level\\n  // (i.e. security level when the server was created)\\n  baseDifficulty = 1;\\n\\t\\n  // Server Security Level\\n  hackDifficulty = 1;\\n\\t\\n  // Minimum server security level that this server can be weakened to\\n  minDifficulty = 1;\\n\\t\\n  // How much money currently resides on the server and can be hacked\\n  moneyAvailable = 0;\\n\\t\\n  // Maximum amount of money that this server can hold\\n  moneyMax = 0;\\n\\t\\n  // Number of open ports required in order to gain admin/root access\\n  numOpenPortsRequired = 5;\\n\\t\\n  // How many ports are currently opened on the server\\n  openPortCount = 0;\\n\\t\\n  // Hacking level required to hack this server\\n  requiredHackingSkill = 1;\\n\\t\\n  // Parameter that affects how effectively this server's money can\\n  // be increased using the grow() Netscript function\\n  serverGrowth = 1;\\n\\t*/\\n\\n\\tfunction ffT(number) {\\n\\t\\treturn Math.ceil(number / 10) / 100;\\n\\t}\\n\\n}\",\"filename\":\"testHackCalc.js\",\"server\":\"home\"}}],[\"orig.lib.helpers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Return a formatted representation of the monetary amount using scale symbols (e.g. $6.50M)\\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatMoney(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    let numberShort = formatNumberShort(num, maxSignificantFigures, maxDecimalPlaces);\\n    return num >= 0 ? \\\"$\\\" + numberShort : numberShort.replace(\\\"-\\\", \\\"-$\\\");\\n}\\n//\\\"\\\", \\\"Kilo\\\", \\\"Mega\\\", \\\"Giga\\\", \\\"Tera\\\", \\\"Peta\\\", \\\"Exa\\\", \\\"Zetta\\\", \\\"Yotta\\\", \\\"Ronna\\\", \\\"Quetta\\\", ... ändern\\nconst symbols = [\\\"\\\", \\\"k\\\", \\\"m\\\", \\\"b\\\", \\\"t\\\", \\\"q\\\", \\\"Q\\\", \\\"s\\\", \\\"S\\\", \\\"o\\\", \\\"n\\\", \\\"e33\\\", \\\"e36\\\", \\\"e39\\\"];\\n\\n/**\\n * Return a formatted representation of the monetary amount using scale sympols (e.g. 6.50M) \\n * @param {number} num - The number to format\\n * @param {number=} maxSignificantFigures - (default: 6) The maximum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} maxDecimalPlaces - (default: 3) The maximum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumberShort(num, maxSignificantFigures = 6, maxDecimalPlaces = 3) {\\n    if (Math.abs(num) > 10 ** (3 * symbols.length)) // If we've exceeded our max symbol, switch to exponential notation\\n        return num.toExponential(Math.min(maxDecimalPlaces, maxSignificantFigures - 1));\\n    for (var i = 0, sign = Math.sign(num), num = Math.abs(num); num >= 1000 && i < symbols.length; i++) num /= 1000;\\n    // TODO: A number like 9.999 once rounded to show 3 sig figs, will become 10.00, which is now 4 sig figs.\\n    return ((sign < 0) ? \\\"-\\\" : \\\"\\\") + num.toFixed(Math.max(0, Math.min(maxDecimalPlaces, maxSignificantFigures - Math.floor(1 + Math.log10(num))))) + symbols[i];\\n}\\n\\n/** Convert a shortened number back into a value */\\nexport function parseShortNumber(text = \\\"0\\\") {\\n    let parsed = Number(text);\\n    if (!isNaN(parsed)) return parsed;\\n    for (const sym of symbols.slice(1))\\n        if (text.toLowerCase().endsWith(sym))\\n            return Number.parseFloat(text.slice(0, text.length - sym.length)) * Math.pow(10, 3 * symbols.indexOf(sym));\\n    return Number.NaN;\\n}\\n\\n/**\\n * Return a number formatted with the specified number of significatnt figures or decimal places, whichever is more limiting.\\n * @param {number} num - The number to format\\n * @param {number=} minSignificantFigures - (default: 6) The minimum significant figures you wish to see (e.g. 123, 12.3 and 1.23 all have 3 significant figures)\\n * @param {number=} minDecimalPlaces - (default: 3) The minimum decimal places you wish to see, regardless of significant figures. (e.g. 12.3, 1.2, 0.1 all have 1 decimal)\\n **/\\nexport function formatNumber(num, minSignificantFigures = 3, minDecimalPlaces = 1) {\\n    return num == 0.0 ? num : num.toFixed(Math.max(minDecimalPlaces, Math.max(0, minSignificantFigures - Math.ceil(Math.log10(num)))));\\n}\\n\\n/** Formats some RAM amount as a round number of GB with thousands separators e.g. `1,028 GB` */\\nexport function formatRam(num) { return `${Math.round(num).toLocaleString('en')} GB`; }\\n\\n/** Return a datatime in ISO format */\\nexport function formatDateTime(datetime) { return datetime.toISOString(); }\\n\\n/** Format a duration (in milliseconds) as e.g. '1h 21m 6s' for big durations or e.g '12.5s' / '23ms' for small durations */\\nexport function formatDuration(duration) {\\n    if (duration < 1000) return `${duration.toFixed(0)}ms`\\n    if (!isFinite(duration)) return 'forever (Infinity)'\\n    const portions = [];\\n    const msInHour = 1000 * 60 * 60;\\n    const hours = Math.trunc(duration / msInHour);\\n    if (hours > 0) {\\n        portions.push(hours + 'h');\\n        duration -= (hours * msInHour);\\n    }\\n    const msInMinute = 1000 * 60;\\n    const minutes = Math.trunc(duration / msInMinute);\\n    if (minutes > 0) {\\n        portions.push(minutes + 'm');\\n        duration -= (minutes * msInMinute);\\n    }\\n    let seconds = (duration / 1000.0)\\n    // Include millisecond precision if we're on the order of seconds\\n    seconds = (hours == 0 && minutes == 0) ? seconds.toPrecision(3) : seconds.toFixed(0);\\n    if (seconds > 0) {\\n        portions.push(seconds + 's');\\n        duration -= (minutes * 1000);\\n    }\\n    return portions.join(' ');\\n}\\n\\n/** Generate a hashCode for a string that is pretty unique most of the time */\\nexport function hashCode(s) { return s.split(\\\"\\\").reduce(function (a, b) { a = ((a << 5) - a) + b.charCodeAt(0); return a & a }, 0); }\\n\\n/** @param {NS} ns **/\\nexport function disableLogs(ns, listOfLogs) { ['disableLog'].concat(...listOfLogs).forEach(log => checkNsInstance(ns, '\\\"disableLogs\\\"').disableLog(log)); }\\n\\n/** Joins all arguments as components in a path, e.g. pathJoin(\\\"foo\\\", \\\"bar\\\", \\\"/baz\\\") = \\\"foo/bar/baz\\\" **/\\nexport function pathJoin(...args) {\\n    return args.filter(s => !!s).join('/').replace(/\\\\/\\\\/+/g, '/');\\n}\\n\\n/** Gets the path for the given local file, taking into account optional subfolder relocation via git-pull.js **/\\nexport function getFilePath(file) {\\n    const subfolder = '';  // git-pull.js optionally modifies this when downloading\\n    return pathJoin(subfolder, file);\\n}\\n\\n// FUNCTIONS THAT PROVIDE ALTERNATIVE IMPLEMENTATIONS TO EXPENSIVE NS FUNCTIONS\\n// VARIATIONS ON NS.RUN\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script **/\\nexport function getFnRunViaNsRun(ns) { return checkNsInstance(ns, '\\\"getFnRunViaNsRun\\\"').run; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.exec in your script **/\\nexport function getFnRunViaNsExec(ns, host = \\\"home\\\") {\\n    checkNsInstance(ns, '\\\"getFnRunViaNsExec\\\"');\\n    return function (scriptPath, ...args) { return ns.exec(scriptPath, host, ...args); }\\n}\\n// VARIATIONS ON NS.ISRUNNING\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.run in your script  */\\nexport function getFnIsAliveViaNsIsRunning(ns) { return checkNsInstance(ns, '\\\"getFnIsAliveViaNsIsRunning\\\"').isRunning; }\\n\\n/** @param {NS} ns\\n *  Use where a function is required to run a script and you have already referenced ns.ps in your script  */\\nexport function getFnIsAliveViaNsPs(ns) {\\n    checkNsInstance(ns, '\\\"getFnIsAliveViaNsPs\\\"');\\n    return function (pid, host) { return ns.ps(host).some(process => process.pid === pid); }\\n}\\n\\n/**\\n * Retrieve the result of an ns command by executing it in a temporary .js script, writing the result to a file, then shuting it down\\n * Importing incurs a maximum of 1.1 GB RAM (0 GB for ns.read, 1 GB for ns.run, 0.1 GB for ns.isRunning).\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function getNsDataThroughFile(ns, command, fName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile\\\"');\\n    if (!verbose) disableLogs(ns, ['run', 'isRunning']);\\n    return await getNsDataThroughFile_Custom(ns, ns.run, command, fName, args, verbose, maxRetries, retryDelayMs);\\n}\\n\\n/**\\n * An advanced version of getNsDataThroughFile that lets you pass your own \\\"fnRun\\\" implementation to reduce RAM requirements\\n * Importing incurs no RAM (now that ns.read is free) plus whatever fnRun you provide it\\n * Has the capacity to retry if there is a failure (e.g. due to lack of RAM available). Not recommended for performance-critical code.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function getNsDataThroughFile_Custom(ns, fnRun, command, fName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"getNsDataThroughFile_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['read']);\\n    const commandHash = hashCode(command);\\n    fName = fName || `/Temp/${commandHash}-data.txt`;\\n    const fNameCommand = (fName || `/Temp/${commandHash}-command`) + '.js'\\n    // Pre-write contents to the file that will allow us to detect if our temp script never got run\\n    const initialContents = \\\"<Insufficient RAM>\\\";\\n    ns.write(fName, initialContents, 'w');\\n    // Prepare a command that will write out a new file containing the results of the command\\n    // unless it already exists with the same contents (saves time/ram to check first)\\n    // If an error occurs, it will write an empty file to avoid old results being misread.\\n    const commandToFile = `let r;try{r=JSON.stringify(\\\\n` +\\n        `    ${command}\\\\n` +\\n        `);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\\\n` +\\n        `const f=\\\"${fName}\\\"; if(ns.read(f)!==r) ns.write(f,r,'w')`;\\n    // Run the command with auto-retries if it fails\\n    const pid = await runCommand_Custom(ns, fnRun, commandToFile, fNameCommand, args, verbose, maxRetries, retryDelayMs);\\n    // Wait for the process to complete. Note, as long as the above returned a pid, we don't actually have to check it, just the file contents\\n    const fnIsAlive = (ignored_pid) => ns.read(fName) === initialContents;\\n    await waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose);\\n    if (verbose) log(ns, `Process ${pid} is done. Reading the contents of ${fName}...`);\\n    // Read the file, with auto-retries if it fails // TODO: Unsure reading a file can fail or needs retrying. \\n    let lastRead;\\n    const fileData = await autoRetry(ns, () => ns.read(fName),\\n        f => (lastRead = f) !== undefined && f !== \\\"\\\" && f !== initialContents && !(typeof f == \\\"string\\\" && f.startsWith(\\\"ERROR: \\\")),\\n        () => `\\\\nns.read('${fName}') returned a bad result: \\\"${lastRead}\\\".` +\\n            `\\\\n  Script:  ${fNameCommand}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n            (lastRead == undefined ? '\\\\nThe developer has no idea how this could have happened. Please post a screenshot of this error on discord.' :\\n                lastRead == initialContents ? `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.` :\\n                    lastRead == \\\"\\\" ? `\\\\nThe file appears to have been deleted before a result could be retrieved. Perhaps there is a conflicting script.` :\\n                        `\\\\nThe script was likely passed invalid arguments. Please post a screenshot of this error on discord.`),\\n        maxRetries, retryDelayMs, undefined, verbose, verbose);\\n    if (verbose) log(ns, `Read the following data for command ${command}:\\\\n${fileData}`);\\n    return JSON.parse(fileData); // Deserialize it back into an object/array and return\\n}\\n\\n/** Evaluate an arbitrary ns command by writing it to a new script and then running or executing it.\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n * @param {bool=} verbose - (default false) If set to true, the evaluation result of the command is printed to the terminal\\n */\\nexport async function runCommand(ns, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand\\\"');\\n    if (!verbose) disableLogs(ns, ['run']);\\n    return await runCommand_Custom(ns, ns.run, command, fileName, args, verbose, maxRetries, retryDelayMs);\\n}\\n\\nconst _cachedExports = [];\\n/** @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @returns {string[]} The set of all funciton names exported by this file. */\\nfunction getExports(ns) {\\n    if (_cachedExports.length > 0) return _cachedExports;\\n    const scriptHelpersRows = ns.read(getFilePath('helpers.js')).split(\\\"\\\\n\\\");\\n    for (const row of scriptHelpersRows) {\\n        if (!row.startsWith(\\\"export\\\")) continue;\\n        const funcNameStart = row.indexOf(\\\"function\\\") + \\\"function\\\".length + 1;\\n        const funcNameEnd = row.indexOf(\\\"(\\\", funcNameStart);\\n        _cachedExports.push(row.substring(funcNameStart, funcNameEnd));\\n    }\\n    return _cachedExports;\\n}\\n\\n/**\\n * An advanced version of runCommand that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnRun, fnWrite are implemented using another ns function you already reference elsewhere like ns.exec)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {function} fnRun - A single-argument function used to start the new sript, e.g. `ns.run` or `(f,...args) => ns.exec(f, \\\"home\\\", ...args)`\\n * @param {string} command - The ns command that should be invoked to get the desired data (e.g. \\\"ns.getServer('home')\\\" )\\n * @param {string=} fileName - (default \\\"/Temp/{commandhash}-data.txt\\\") The name of the file to which data will be written to disk by a temporary process\\n * @param {args=} args - args to be passed in as arguments to command being run as a new script.\\n **/\\nexport async function runCommand_Custom(ns, fnRun, command, fileName, args = [], verbose = false, maxRetries = 5, retryDelayMs = 50) {\\n    checkNsInstance(ns, '\\\"runCommand_Custom\\\"');\\n    if (!Array.isArray(args)) throw new Error(`args specified were a ${typeof args}, but an array is required.`);\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Auto-import any helpers that the temp script attempts to use\\n    const required = getExports(ns).filter(e => command.includes(`${e}(`));\\n    let script = (required.length > 0 ? `import { ${required.join(\\\", \\\")} } from 'helpers.js'\\\\n` : '') +\\n        `export async function main(ns) { ${command} }`;\\n    fileName = fileName || `/Temp/${hashCode(command)}-command.js`;\\n    if (verbose)\\n        log(ns, `INFO: Using a temporary script (${fileName}) to execute the command:` +\\n            `\\\\n  ${command}\\\\nWith the following arguments:    ${JSON.stringify(args)}`);\\n    // It's possible for the file to be deleted while we're trying to execute it, so even wrap writing the file in a retry\\n    return await autoRetry(ns, async () => {\\n        // To improve performance, don't re-write the temp script if it's already in place with the correct contents.\\n        const oldContents = ns.read(fileName);\\n        if (oldContents != script) {\\n            if (oldContents) // Create some noise if temp scripts are being created with the same name but different contents\\n                ns.tprint(`WARNING: Had to overwrite temp script ${fileName}\\\\nOld Contents:\\\\n${oldContents}\\\\nNew Contents:\\\\n${script}` +\\n                    `\\\\nThis warning is generated as part of an effort to switch over to using only 'immutable' temp scripts. ` +\\n                    `Please paste a screenshot in Discord at https://discord.com/channels/415207508303544321/935667531111342200`);\\n            ns.write(fileName, script, \\\"w\\\");\\n            // Wait for the script to appear and be readable (game can be finicky on actually completing the write)\\n            await autoRetry(ns, () => ns.read(fileName), c => c == script, () => `Temporary script ${fileName} is not available, ` +\\n                `despite having written it. (Did a competing process delete or overwrite it?)`, maxRetries, retryDelayMs, undefined, verbose, verbose);\\n        }\\n        // Run the script, now that we're sure it is in place\\n        return fnRun(fileName, 1 /* Always 1 thread */, ...args);\\n    }, pid => pid !== 0,\\n        () => `The temp script was not run (likely due to insufficient RAM).` +\\n            `\\\\n  Script:  ${fileName}\\\\n  Args:    ${JSON.stringify(args)}\\\\n  Command: ${command}` +\\n            `\\\\nThe script that ran this will likely recover and try again later once you have more free ram.`,\\n        maxRetries, retryDelayMs, undefined, verbose, verbose);\\n}\\n\\n/**\\n * Wait for a process id to complete running\\n * Importing incurs a maximum of 0.1 GB RAM (for ns.isRunning) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {int} pid - The process id to monitor\\n * @param {bool=} verbose - (default false) If set to true, pid and result of command are logged.\\n **/\\nexport async function waitForProcessToComplete(ns, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete\\\"');\\n    if (!verbose) disableLogs(ns, ['isRunning']);\\n    return await waitForProcessToComplete_Custom(ns, ns.isRunning, pid, verbose);\\n}\\n/**\\n * An advanced version of waitForProcessToComplete that lets you pass your own \\\"isAlive\\\" test to reduce RAM requirements (e.g. to avoid referencing ns.isRunning)\\n * Importing incurs 0 GB RAM (assuming fnIsAlive is implemented using another ns function you already reference elsewhere like ns.ps) \\n * @param {NS} ns - The nestcript instance passed to your script's main entry point\\n * @param {(pid: number) => Promise<boolean>} fnIsAlive - A single-argument function used to start the new sript, e.g. `ns.isRunning` or `pid => ns.ps(\\\"home\\\").some(process => process.pid === pid)`\\n **/\\nexport async function waitForProcessToComplete_Custom(ns, fnIsAlive, pid, verbose) {\\n    checkNsInstance(ns, '\\\"waitForProcessToComplete_Custom\\\"');\\n    if (!verbose) disableLogs(ns, ['sleep']);\\n    // Wait for the PID to stop running (cheaper than e.g. deleting (rm) a possibly pre-existing file and waiting for it to be recreated)\\n    let start = Date.now();\\n    let sleepMs = 1;\\n    let done = false;\\n    for (var retries = 0; retries < 1000; retries++) {\\n        if (!(await fnIsAlive(pid))) {\\n            done = true;\\n            break; // Script is done running\\n        }\\n        if (verbose && retries % 100 === 0) ns.print(`Waiting for pid ${pid} to complete... (${formatDuration(Date.now() - start)})`);\\n        await ns.sleep(sleepMs);\\n        sleepMs = Math.min(sleepMs * 2, 200);\\n    }\\n    // Make sure that the process has shut down and we haven't just stopped retrying\\n    if (!done) {\\n        let errorMessage = `run-command pid ${pid} is running much longer than expected. Max retries exceeded.`;\\n        ns.print(errorMessage);\\n        throw new Error(errorMessage);\\n    }\\n}\\n\\n/** If the argument is an Error instance, returns it as is, otherwise, returns a new Error instance. */\\nfunction asError(error) {\\n    return error instanceof Error ? error : new Error(typeof error === 'string' ? error : JSON.stringify(error));\\n}\\n\\n/** Helper to retry something that failed temporarily (can happen when e.g. we temporarily don't have enough RAM to run)\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport async function autoRetry(ns, fnFunctionThatMayFail, fnSuccessCondition, errorContext = \\\"Success condition not met\\\",\\n    maxRetries = 5, initialRetryDelayMs = 50, backoffRate = 3, verbose = false, tprintFatalErrors = true) {\\n    checkNsInstance(ns, '\\\"autoRetry\\\"');\\n    let retryDelayMs = initialRetryDelayMs, attempts = 0;\\n    while (attempts++ <= maxRetries) {\\n        try {\\n            const result = await fnFunctionThatMayFail()\\n            const error = typeof errorContext === 'string' ? errorContext : errorContext();\\n            if (!fnSuccessCondition(result))\\n                throw asError(error);\\n            return result;\\n        }\\n        catch (error) {\\n            const fatal = attempts >= maxRetries;\\n            log(ns, `${fatal ? 'FAIL' : 'INFO'}: Attempt ${attempts} of ${maxRetries} failed` +\\n                (fatal ? `: ${typeof error === 'string' ? error : error.message || JSON.stringify(error)}` : `. Trying again in ${retryDelayMs}ms...`),\\n                tprintFatalErrors && fatal, !verbose ? undefined : (fatal ? 'error' : 'info'))\\n            if (fatal) throw asError(error);\\n            await ns.sleep(retryDelayMs);\\n            retryDelayMs *= backoffRate;\\n        }\\n    }\\n}\\n\\n/** Helper to log a message, and optionally also tprint it and toast it\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function log(ns, message = \\\"\\\", alsoPrintToTerminal = false, toastStyle = \\\"\\\", maxToastLength = Number.MAX_SAFE_INTEGER) {\\n    checkNsInstance(ns, '\\\"log\\\"');\\n    ns.print(message);\\n    if (toastStyle) ns.toast(message.length <= maxToastLength ? message : message.substring(0, maxToastLength - 3) + \\\"...\\\", toastStyle);\\n    if (alsoPrintToTerminal) {\\n        ns.tprint(message);\\n        // TODO: Find a way write things logged to the terminal to a \\\"permanent\\\" terminal log file, preferably without this becoming an async function.\\n        //       Perhaps we copy logs to a port so that a separate script can optionally pop and append them to a file.\\n        //ns.write(\\\"log.terminal.txt\\\", message + '\\\\n', 'a'); // Note: we should get away with not awaiting this promise since it's not a script file\\n    }\\n    return message;\\n}\\n\\n/** Helper to get a list of all hostnames on the network\\n * @param {NS} ns - The nestcript instance passed to your script's main entry point */\\nexport function scanAllServers(ns) {\\n    checkNsInstance(ns, '\\\"scanAllServers\\\"');\\n    let discoveredHosts = []; // Hosts (a.k.a. servers) we have scanned\\n    let hostsToScan = [\\\"home\\\"]; // Hosts we know about, but have no yet scanned\\n    let infiniteLoopProtection = 9999; // In case you mess with this code, this should save you from getting stuck\\n    while (hostsToScan.length > 0 && infiniteLoopProtection-- > 0) { // Loop until the list of hosts to scan is empty\\n        let hostName = hostsToScan.pop(); // Get the next host to be scanned\\n        discoveredHosts.push(hostName); // Mark this host as \\\"scanned\\\"\\n        for (const connectedHost of ns.scan(hostName)) // \\\"scan\\\" (list all hosts connected to this one)\\n            if (!discoveredHosts.includes(connectedHost) && !hostsToScan.includes(connectedHost)) // If we haven't found this host\\n                hostsToScan.push(connectedHost); // Add it to the queue of hosts to be scanned\\n    }\\n    return discoveredHosts; // The list of scanned hosts should now be the set of all hosts in the game!\\n}\\n\\n/** @param {NS} ns \\n * Get a dictionary of active source files, taking into account the current active bitnode as well (optionally disabled). **/\\nexport async function getActiveSourceFiles(ns, includeLevelsFromCurrentBitnode = true) {\\n    return await getActiveSourceFiles_Custom(ns, getNsDataThroughFile, includeLevelsFromCurrentBitnode);\\n}\\n\\n/** @param {NS} ns \\n * @param {(ns: NS, command: string, fName?: string, args?: any, verbose?: any, maxRetries?: number, retryDelayMs?: number) => Promise<any>} fnGetNsDataThroughFile\\n * getActiveSourceFiles Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile, includeLevelsFromCurrentBitnode = true) {\\n    checkNsInstance(ns, '\\\"getActiveSourceFiles\\\"');\\n    // Find out what source files the user has unlocked\\n    let dictSourceFiles;\\n    try {\\n        dictSourceFiles = await fnGetNsDataThroughFile(ns,\\n            `Object.fromEntries(ns.singularity.getOwnedSourceFiles().map(sf => [sf.n, sf.lvl]))`,\\n            '/Temp/owned-source-files.txt');\\n    } catch { dictSourceFiles = {}; } // If this fails (e.g. low RAM), return an empty dictionary\\n    // If the user is currently in a given bitnode, they will have its features unlocked\\n    if (includeLevelsFromCurrentBitnode) {\\n        try {\\n            const bitNodeN = (await fnGetNsDataThroughFile(ns, 'ns.getPlayer()', '/Temp/player-info.txt')).bitNodeN;\\n            dictSourceFiles[bitNodeN] = Math.max(3, dictSourceFiles[bitNodeN] || 0);\\n        } catch { /* We are expected to be fault-tolerant in low-ram conditions */ }\\n    }\\n    return dictSourceFiles;\\n}\\n\\n/** @param {NS} ns \\n * Return bitnode multiplers, or null if they cannot be accessed. **/\\nexport async function tryGetBitNodeMultipliers(ns) {\\n    return await tryGetBitNodeMultipliers_Custom(ns, getNsDataThroughFile);\\n}\\n\\n/** @param {NS} ns\\n * tryGetBitNodeMultipliers Helper that allows the user to pass in their chosen implementation of getNsDataThroughFile to minimize RAM usage **/\\nexport async function tryGetBitNodeMultipliers_Custom(ns, fnGetNsDataThroughFile) {\\n    checkNsInstance(ns, '\\\"tryGetBitNodeMultipliers\\\"');\\n    let canGetBitNodeMultipliers = false;\\n    try { canGetBitNodeMultipliers = 5 in (await getActiveSourceFiles_Custom(ns, fnGetNsDataThroughFile)); } catch { }\\n    if (!canGetBitNodeMultipliers) return null;\\n    try { return await fnGetNsDataThroughFile(ns, 'ns.getBitNodeMultipliers()', '/Temp/bitnode-multipliers.txt'); } catch { }\\n    return null;\\n}\\n\\n/** @param {NS} ns \\n * Returns the number of instances of the current script running on the specified host. **/\\nexport async function instanceCount(ns, onHost = \\\"home\\\", warn = true, tailOtherInstances = true) {\\n    checkNsInstance(ns, '\\\"alreadyRunning\\\"');\\n    const scriptName = ns.getScriptName();\\n    const others = await getNsDataThroughFile(ns, 'ns.ps(ns.args[0]).filter(p => p.filename == ns.args[1]).map(p => p.pid)',\\n        '/Temp/ps-other-instances.txt', [onHost, scriptName]);\\n    if (others.length >= 2) {\\n        if (warn)\\n            log(ns, `WARNING: You cannot start multiple versions of this script (${scriptName}). Please shut down the other instance first.` +\\n                (tailOtherInstances ? ' (To help with this, a tail window for the other instance will be opened)' : ''), true, 'warning');\\n        if (tailOtherInstances) // Tail all but the last pid, since it will belong to the current instance (which will be shut down)\\n            others.slice(0, others.length - 1).forEach(pid => ns.tail(pid));\\n    }\\n    return others.length;\\n}\\n\\nlet cachedStockSymbols = null; // Cache of stock symbols since these never change\\n\\n/** Helper function to get all stock symbols, or null if you do not have TIX api access.\\n * Caches symbols the first time they are successfully requested, since symbols never change.\\n * @param {NS} ns */\\nexport async function getStockSymbols(ns) {\\n    cachedStockSymbols ??= await getNsDataThroughFile(ns,\\n        `(() => { try { return ns.stock.getSymbols(); } catch { return null; } })()`,\\n        '/Temp/stock-symbols.txt');\\n    return cachedStockSymbols;\\n}\\n\\n/** Helper function to get the total value of stocks using as little RAM as possible.\\n * @param {NS} ns */\\nexport async function getStocksValue(ns) {\\n    let stockSymbols = await getStockSymbols(ns);\\n    if (stockSymbols == null) return 0; // No TIX API Access\\n    const helper = async (fn) => await getNsDataThroughFile(ns,\\n        `Object.fromEntries(ns.args.map(sym => [sym, ns.stock.${fn}(sym)]))`, `/Temp/stock-${fn}.txt`, stockSymbols);\\n    const askPrices = await helper('getAskPrice');\\n    const bidPrices = await helper('getBidPrice');\\n    const positions = await helper('getPosition');\\n    return stockSymbols.map(sym => ({ sym, pos: positions[sym], ask: askPrices[sym], bid: bidPrices[sym] }))\\n        .reduce((total, stk) => total + (stk.pos[0] * stk.bid) /* Long Value */ + stk.pos[2] * (stk.pos[3] * 2 - stk.ask) /* Short Value */\\n            // Subtract commission only if we have one or more shares (this is money we won't get when we sell our position)\\n            // If for some crazy reason we have shares both in the short and long position, we'll have to pay the commission twice (two separate sales)\\n            - 100000 * (Math.sign(stk.pos[0]) + Math.sign(stk.pos[2])), 0);\\n}\\n\\n/** @param {NS} ns \\n * Returns a helpful error message if we forgot to pass the ns instance to a function */\\nexport function checkNsInstance(ns, fnName = \\\"this function\\\") {\\n    if (ns === undefined || !ns.print) throw new Error(`The first argument to ${fnName} should be a 'ns' instance.`);\\n    return ns;\\n}\\n\\n/** A helper to parse the command line arguments with a bunch of extra features, such as\\n * - Loading a persistent defaults override from a local config file named after the script.\\n * - Rendering \\\"--help\\\" output without all scripts having to explicitly specify it\\n * @param {NS} ns\\n * @param {[string, string | number | boolean | string[]][]} argsSchema - Specification of possible command line args. **/\\nexport function getConfiguration(ns, argsSchema) {\\n    checkNsInstance(ns, '\\\"getConfig\\\"');\\n    const scriptName = ns.getScriptName();\\n    // If the user has a local config file, override the defaults in the argsSchema\\n    const confName = `${scriptName}.config.txt`;\\n    const overrides = ns.read(confName);\\n    const overriddenSchema = overrides ? [...argsSchema] : argsSchema; // Clone the original args schema    \\n    if (overrides) {\\n        try {\\n            let parsedOverrides = JSON.parse(overrides); // Expect a parsable dict or array of 2-element arrays like args schema\\n            if (Array.isArray(parsedOverrides)) parsedOverrides = Object.fromEntries(parsedOverrides);\\n            log(ns, `INFO: Applying ${Object.keys(parsedOverrides).length} overriding default arguments from \\\"${confName}\\\"...`);\\n            for (const key in parsedOverrides) {\\n                const override = parsedOverrides[key];\\n                const matchIndex = overriddenSchema.findIndex(o => o[0] == key);\\n                const match = matchIndex === -1 ? null : overriddenSchema[matchIndex];\\n                if (!match)\\n                    throw new Error(`Unrecognized key \\\"${key}\\\" does not match of this script's options: ` + JSON.stringify(argsSchema.map(a => a[0])));\\n                else if (override === undefined)\\n                    throw new Error(`The key \\\"${key}\\\" appeared in the config with no value. Some value must be provided. Try null?`);\\n                else if (match && JSON.stringify(match[1]) != JSON.stringify(override)) {\\n                    if (typeof (match[1]) !== typeof (override))\\n                        log(ns, `WARNING: The \\\"${confName}\\\" overriding \\\"${key}\\\" value: ${JSON.stringify(override)} has a different type (${typeof override}) than the ` +\\n                            `current default value ${JSON.stringify(match[1])} (${typeof match[1]}). The resulting behaviour may be unpredictable.`, false, 'warning');\\n                    else\\n                        log(ns, `INFO: Overriding \\\"${key}\\\" value: ${JSON.stringify(match[1])}  ->  ${JSON.stringify(override)}`);\\n                    overriddenSchema[matchIndex] = { ...match }; // Clone the (previously shallow-copied) object at this position of the new argsSchema\\n                    overriddenSchema[matchIndex][1] = override; // Update the value of the clone.\\n                }\\n            }\\n        } catch (err) {\\n            log(ns, `ERROR: There's something wrong with your config file \\\"${confName}\\\", it cannot be loaded.` +\\n                `\\\\nThe error encountered was: ${(typeof err === 'string' ? err : err.message || JSON.stringify(err))}` +\\n                `\\\\nYour config file should either be a dictionary e.g.: { \\\"string-opt\\\": \\\"value\\\", \\\"num-opt\\\": 123, \\\"array-opt\\\": [\\\"one\\\", \\\"two\\\"] }` +\\n                `\\\\nor an array of dict entries (2-element arrays) e.g.: [ [\\\"string-opt\\\", \\\"value\\\"], [\\\"num-opt\\\", 123], [\\\"array-opt\\\", [\\\"one\\\", \\\"two\\\"]] ]` +\\n                `\\\\n\\\"${confName}\\\" contains:\\\\n${overrides}`, true, 'error', 80);\\n            return null;\\n        }\\n    }\\n    // Return the result of using the in-game args parser to combine the defaults with the command line args provided\\n    try {\\n        const finalOptions = ns.flags(overriddenSchema);\\n        log(ns, `INFO: Running ${scriptName} with the following settings:` + Object.keys(finalOptions).filter(a => a != \\\"_\\\").map(a =>\\n            `\\\\n  ${a.length == 1 ? \\\"-\\\" : \\\"--\\\"}${a} = ${finalOptions[a] === null ? \\\"null\\\" : JSON.stringify(finalOptions[a])}`).join(\\\"\\\") +\\n            `\\\\nrun ${scriptName} --help  to get more information about these options.`)\\n        return finalOptions;\\n    } catch (err) { // Detect if the user passed invalid arguments, and return help text\\n        const error = ns.args.includes(\\\"help\\\") || ns.args.includes(\\\"--help\\\") ? null : // Detect if the user explictly asked for help and suppress the error\\n            (typeof err === 'string' ? err : err.message || JSON.stringify(err));\\n        // Try to parse documentation about each argument from the source code's comments\\n        const source = ns.read(scriptName).split(\\\"\\\\n\\\");\\n        let argsRow = 1 + source.findIndex(row => row.includes(\\\"argsSchema =\\\"));\\n        const optionDescriptions = {}\\n        while (argsRow && argsRow < source.length) {\\n            const nextArgRow = source[argsRow++].trim();\\n            if (nextArgRow.length == 0) continue;\\n            if (nextArgRow[0] == \\\"]\\\" || nextArgRow.includes(\\\";\\\")) break; // We've reached the end of the args schema\\n            const commentSplit = nextArgRow.split(\\\"//\\\").map(e => e.trim());\\n            if (commentSplit.length != 2) continue; // This row doesn't appear to be in the format: [option...], // Comment\\n            const optionSplit = commentSplit[0].split(\\\"'\\\"); // Expect something like: ['name', someDefault]. All we need is the name\\n            if (optionSplit.length < 2) continue;\\n            optionDescriptions[optionSplit[1]] = commentSplit[1];\\n        }\\n        log(ns, (error ? `ERROR: There was an error parsing the script arguments provided: ${error}\\\\n` : 'INFO: ') +\\n            `${scriptName} possible arguments:` + argsSchema.map(a => `\\\\n  ${a[0].length == 1 ? \\\" -\\\" : \\\"--\\\"}${a[0].padEnd(30)} ` +\\n                `Default: ${(a[1] === null ? \\\"null\\\" : JSON.stringify(a[1])).padEnd(10)}` +\\n                (a[0] in optionDescriptions ? ` // ${optionDescriptions[a[0]]}` : '')).join(\\\"\\\") + '\\\\n' +\\n            `\\\\nTip: All argument names, and some values support auto-complete. Hit the <tab> key to autocomplete or see possible options.` +\\n            `\\\\nTip: Array arguments are populated by specifying the argument multiple times, e.g.:` +\\n            `\\\\n       run ${scriptName} --arrayArg first --arrayArg second --arrayArg third  to run the script with arrayArg=[first, second, third]` +\\n            (!overrides ? `\\\\nTip: You can override the default values by creating a config file named \\\"${confName}\\\" containing e.g.: { \\\"arg-name\\\": \\\"preferredValue\\\" }`\\n                : overrides && !error ? `\\\\nNote: The default values are being modified by overrides in your local \\\"${confName}\\\":\\\\n${overrides}`\\n                    : `\\\\nThis error may have been caused by your local overriding \\\"${confName}\\\" (especially if you changed the types of any options):\\\\n${overrides}`), true);\\n        return null; // Caller should handle null and shut down elegantly.\\n    }\\n}\\n\\n/** In order to pass in args to pass along to the startup/completion script, they may have to be quoted, when given as\\n * parameters to this script, but those quotes will have to be stripped when passing these along to a subsequent script as raw strings.\\n * @param {string[]} args - The the array-argument passed to the script.\\n * @returns {string[]} The the array-argument unescaped (or deserialized if a single argument starting with '[' was supplied]). */\\nexport function unEscapeArrayArgs(args) {\\n    // For convenience, also support args as a single stringified array\\n    if (args.length == 1 && args[0].startsWith(\\\"[\\\")) return JSON.parse(args[0]);\\n    // Otherwise, args wrapped in quotes should have those quotes removed.\\n    const escapeChars = ['\\\"', \\\"'\\\", \\\"`\\\"];\\n    return args.map(arg => escapeChars.some(c => arg.startsWith(c) && arg.endsWith(c)) ? arg.slice(1, -1) : arg);\\n}\",\"filename\":\"orig.lib.helpers.js\",\"server\":\"home\"}}],[\"casino.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { log, getConfiguration, getFilePath, waitForProcessToComplete, runCommand, getNsDataThroughFile, autoRetry } from './orig.lib.helpers.js'\\n\\nconst ran_flag = \\\"/Temp/ran-casino.txt\\\"\\nconst doc = globalThis[\\\"document\\\"];\\nlet options;\\nconst argsSchema = [\\n    ['save-sleep-time', 10], // Time to sleep in milliseconds after saving. If you are having trouble with your automatic saves not \\\"taking effect\\\" try increasing this.\\n    ['click-sleep-time', 1], // Time to sleep in milliseconds after clicking any button (or setting text). Increase if your are getting errors on click.\\n    ['use-basic-strategy', false], // Set to true to use the basic strategy (Stay on 17+)\\n    ['enable-logging', false], // Set to true to pop up a tail window and generate logs.\\n    ['kill-all-scripts', false], // Set to true to kill all running scripts before running.\\n    ['no-deleting-remote-files', false], // By default, if --kill-all-scripts, we will also remove remote files to speed up save/reload\\n    ['on-completion-script', null], // Spawn this script when max-charges is reached\\n    ['on-completion-script-args', []], // Optional args to pass to the script when launched\\n];\\nexport function autocomplete(data, args) {\\n    data.flags(argsSchema);\\n    const lastFlag = args.length > 1 ? args[args.length - 2] : null;\\n    if ([\\\"--on-completion-script\\\"].includes(lastFlag))\\n        return data.scripts;\\n    return [];\\n}\\n\\nlet _ns; // Lazy global copy of ns so we can sleep in the click handler\\n\\n/** Helper to open a tail window and log a message to the console and terminal. Useful when trying to inform the player of a failure.\\n * @param {NS} ns **/\\nfunction tailAndLog(ns, message) {\\n    ns.tail();\\n    log(ns, message, true);\\n}\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    options = getConfiguration(ns, argsSchema);\\n    if (!options) return; // Invalid options, or ran in --help mode.\\n    _ns = ns;\\n    const saveSleepTime = options['save-sleep-time'];\\n    if (options['enable-logging'])\\n        ns.tail()\\n    else\\n        ns.disableLog(\\\"ALL\\\");\\n\\n    // Step 1: Go to Aevum if we aren't already there. (Must be done manually if you don't have SF4)\\n    if (ns.getPlayer().city != \\\"Aevum\\\") {\\n        try {\\n            if (ns.getPlayer().money < 200000 || !(await getNsDataThroughFile(ns, 'ns.singularity.travelToCity(ns.args[0])', null, [\\\"Aevum\\\"])))\\n                return tailAndLog(ns, \\\"ERROR: Sorry, you need at least 200k to travel to the casino.\\\");\\n        } catch (err) {\\n            return tailAndLog(ns, \\\"ERROR: You must manually travel to to Aevum to use this script until you get SF4\\\");\\n        }\\n    }\\n\\n    // Helper function to detect if the \\\"Stop [[faction|company] work|styding|training]\\\" etc... button from the focus screen is up\\n    const checkForFocusScreen = async () =>\\n        await findRetry(ns, \\\"//button[contains(text(), 'Stop playing')]\\\", true) ? false : // False positive, casino \\\"stop\\\" button, no problems here\\n            await findRetry(ns, \\\"//button[contains(text(), 'Stop')]\\\", true); // Otherwise, a button with \\\"Stop\\\" on it is probably from the work screen\\n\\n    // Find the button used to save the game\\n    const btnSaveGame = await findRetry(ns, \\\"//button[@aria-label = 'save game']\\\");\\n    if (!btnSaveGame)\\n        return tailAndLog(ns, \\\"ERROR: Sorry, couldn't find the Overview Save (💾) button. Is your \\\\\\\"Overview\\\\\\\" panel collapsed or modded?\\\");\\n    let inputWager, btnStartGame;\\n\\n    // Step 2: Try to navigate to the blackjack game until successful, in case something repeatedly steals focus\\n    let attempts = 0;\\n    while (attempts++ <= 10) {\\n        if (attempts > 1) ns.sleep(1000);\\n        try {\\n            // Step 2.1: If the player is focused, stop the current action\\n            const btnStopAction = await checkForFocusScreen();\\n            if (btnStopAction) { // If we were performing an action unfocused, it will be focused on restart and we must stop that action to navigate.\\n                log(ns, \\\"It looks like we're on a focus screen. Stopping whatever we're doing...\\\")\\n                await click(btnStopAction);\\n            }\\n            // Step 2.2: Navigate to the City Casino\\n            try { // Try to do this without SF4, because it's faster and doesn't require a temp script to be cleaned up below\\n                // Click our way to the city casino\\n                await click(await findRetry(ns, \\\"//div[(@role = 'button') and (contains(., 'City'))]\\\"));\\n                await click(await findRetry(ns, \\\"//span[@aria-label = 'Iker Molina Casino']\\\"));\\n            } catch { // Use SF4 as a fallback, it's more reliable.\\n                try { await getNsDataThroughFile(ns, 'ns.singularity.goToLocation(ns.args[0])', null, [\\\"Iker Molina Casino\\\"]); }\\n                catch { return tailAndLog(ns, \\\"ERROR: Failed to travel to the casino both using UI navigation and using SF4 as a fall-back.\\\"); }\\n            }\\n            // Step 2.3: Try to start the blackjack game\\n            const blackjack = await findRetry(ns, \\\"//button[contains(text(), 'blackjack')]\\\");\\n            if (!blackjack) {\\n                tailAndLog(ns, `ERROR: Could not find the \\\"Play blackjack\\\" button. Did something steal focus? Trying again... ` +\\n                    `Please post a full-game screenshot on Discord if you can't get past this point.`)\\n                continue; // Loop back to start and try again\\n            }\\n            await click(blackjack);\\n\\n            // Step 2.4: Get some buttons we will need to play blackjack\\n            inputWager = await findRetry(ns, \\\"//input[@value = 1000000]\\\");\\n            btnStartGame = await findRetry(ns, \\\"//button[text() = 'Start']\\\");\\n            if (!inputWager || !btnStartGame) {\\n                tailAndLog(ns, `ERROR: Could not find one or more game controls. Did something steal focus? Trying again... ` +\\n                    `Please post a full-game screenshot on Discord if you can't get past this point.`)\\n                continue; // Loop back to start and try again\\n            }\\n\\n            // Step 2.5: Clean up temp files and kill other running scripts to speed up the reload cycle\\n            if (ns.ls(\\\"home\\\", \\\"Temp/\\\").length > 0) { // Do a little clean-up to speed up save/load.\\n                // Step 2.5.1: Test that we aren't already kicked out of the casino before doing drastic things like killing scripts\\n                await setText(inputWager, `1`); // Bet just a dollar and quick the game right away, no big deal\\n                await click(btnStartGame);\\n                if (await findRetry(ns, \\\"//p[contains(text(), 'Count:')]\\\", true, 10)) { // If this works, we're still allowed in\\n                    const btnStay = await findRetry(ns, \\\"//button[text() = 'Stay']\\\", true);\\n                    if (btnStay) await click(btnStay); // Trigger the game to end if we didn't instantly win/lose our $1 bet.\\n                } else { // Otherwise, we've probably been kicked out of the casino, but...\\n                    // because we haven't killed scripts yet, it's possible another script stole focus again. Detect and handle that case.\\n                    if (await checkForFocusScreen()) {\\n                        log(ns, \\\"ERROR: It looks like something stole focus while we were trying to automate the casino. Trying again.\\\");\\n                        continue; // Loop back to start and try again\\n                    }\\n                    ns.write(ran_flag, \\\"True\\\", \\\"w\\\"); // Write a flag other scripts can check for indicating we think we've been kicked out of the casino.\\n                    return log(ns, \\\"INFO: We appear to already have been previously kicked out of the casino.\\\", true);\\n                }\\n                // Step 2.5.2: Kill all other scripts if enabled (note, we assume that if the temp folder is empty, they're already killed and this is a reload)\\n                if (options['kill-all-scripts'])\\n                    await killAllOtherScripts(ns, !options['no-deleting-remote-files']);\\n                // Step 2.5.3: Clear the temp folder on home (all transient scripts / outputs)\\n                await waitForProcessToComplete(ns, ns.run(getFilePath('cleanup.js')));\\n            }\\n            break; // We achieved everthing we wanted, we can exit the while loop.\\n        } catch (err) {\\n            ns.tail(); // We're having difficulty, pop open a tail window so the user is aware.\\n            log(ns, `WARNING: casino.js Caught (and suppressed) an unexpected error while navigating to blackjack. Will try again...\\\\n` +\\n                (typeof err === 'string' ? err : err.message || JSON.stringify(err)), false, 'warning');\\n        }\\n    }\\n\\n    if (ns.getPlayer().money < 1)\\n        return log(ns, \\\"WARNING: Whoops, we have no money to bet! Kill whatever's spending it and try again later.\\\", true, 'warning');\\n\\n    // Step 3: Save the fact that this script is now running, so that future reloads start this script back up immediately.\\n    if (saveSleepTime) await ns.sleep(saveSleepTime); // Anecdotally, some users report the first save is \\\"stale\\\" (doesn't include casino.js running). Maybe this delay helps?\\n    await click(btnSaveGame);\\n    if (saveSleepTime) await ns.sleep(saveSleepTime);\\n\\n    // Step 4: Play until we lose\\n    while (true) {\\n        const bet = Math.min(1E8, ns.getPlayer().money * 0.9 /* Avoid timing issues with other scripts spending money */);\\n        if (bet < 0) return await reload(ns); // If somehow we have no money, we can't continue\\n        await setText(inputWager, `${bet}`);\\n        await click(btnStartGame);\\n        const btnHit = await findRetry(ns, \\\"//button[text() = 'Hit']\\\");\\n        const btnStay = await findRetry(ns, \\\"//button[text() = 'Stay']\\\");\\n        let won;\\n        do { // Inner-loop to play a single hand\\n            won = await findRetry(ns, \\\"//p[contains(text(), 'lost')]\\\", true) ? false : // Detect whether we lost or won. Annoyingly, when we win with blackjack, \\\"Won\\\" is Title-Case.\\n                await findRetry(ns, \\\"//p[contains(text(), 'won')]\\\", true) ||\\n                    await findRetry(ns, \\\"//p[contains(text(), 'Won')]\\\", true) ? true : null;\\n            if (won === null) {\\n                if (await findRetry(ns, \\\"//p[contains(text(), 'Tie')]\\\", true)) break; // If we tied, break and start a new hand.\\n                const txtCount = await findRetry(ns, \\\"//p[contains(text(), 'Count:')]\\\", true, 20);\\n                if (!txtCount) { // If we can't find the count, we've either been kicked out, or maybe routed to another screen.\\n                    return await checkForFocusScreen() /* Detect the case where we started working/training */ ?\\n                        log(ns, \\\"ERROR: It looks like something stole focus while we were trying to automate the casino. Please try again.\\\", true) :\\n                        onCompletion(ns); // Otherwise, assume we've been kicked out of the casino for having stolen the max 10b\\n                }\\n                const allCounts = txtCount.querySelectorAll('span');\\n                const highCount = Number(allCounts[allCounts.length - 1].innerText);\\n                const shouldHit = options['use-basic-strategy'] ? highCount < 17 : shouldHitAdvanced(ns, txtCount);\\n                if (options['enable-logging']) log(ns, `INFO: Count is ${highCount}, we will ${shouldHit ? 'Hit' : 'Stay'}`);\\n                await click(shouldHit ? btnHit : btnStay);\\n                await ns.sleep(1); // Yield for an instant so the UI can update and process events\\n            }\\n        } while (won === null);\\n        if (won === null) continue; // Only possible if we tied and broke out early. Start a new hand.\\n        if (!won) return await reload(ns); // Reload if we lost\\n        await click(btnSaveGame); // Save if we won\\n        if (saveSleepTime) await ns.sleep(saveSleepTime);\\n    }\\n}\\n\\n/** Forces the game to reload (without saving). Great for save scumming.\\n * WARNING: Doesn't work if the user last ran the game with \\\"Reload and kill all scripts\\\" \\n * @param {NS} ns */\\nasync function reload(ns) {\\n    eval(\\\"window\\\").onbeforeunload = null; // Disable the unsaved changes warning before reloading\\n    await ns.sleep(options['save-sleep-time']); // Yield execution for an instant incase the game needs to finish a save or something\\n    location.reload(); // Force refresh the page without saving           \\n    await ns.sleep(10000); // Keep the script alive to be safe. Presumably the page reloads before this completes.\\n}\\n\\n/** @param {NS} ns \\n *  Helper to kill all scripts on all other servers, except this one **/\\nasync function killAllOtherScripts(ns, removeRemoteFiles) {\\n    // Kill processes on home (except this one)\\n    let pid = await runCommand(ns, `ns.ps().filter(s => s.filename != ns.args[0]).forEach(s => ns.kill(s.pid));`,\\n        '/Temp/kill-everything-but.js', [ns.getScriptName()]);\\n    await waitForProcessToComplete(ns, pid);\\n    log(ns, `INFO: Killed other scripts running on home...`, true);\\n\\n    // Kill processes on all other servers\\n    const allServers = await getNsDataThroughFile(ns, 'scanAllServers(ns)');\\n    const serversExceptHome = allServers.filter(s => s != \\\"home\\\");\\n    pid = await runCommand(ns, 'ns.args.forEach(host => ns.killall(host))',\\n        '/Temp/kill-all-scripts-on-servers.js', serversExceptHome);\\n    await waitForProcessToComplete(ns, pid);\\n    log(ns, 'INFO: Killed all scripts running on other hosts...', true);\\n\\n    // If enabled, remove files on all other servers\\n    if (removeRemoteFiles) {\\n        pid = await runCommand(ns, 'ns.args.forEach(host => ns.ls(host).forEach(file => ns.rm(file, host)))',\\n            '/Temp/delete-files-on-servers.js', serversExceptHome)\\n        await waitForProcessToComplete(ns, pid);\\n        log(ns, 'INFO: Removed all files on other hosts...', true)\\n    }\\n}\\n\\n/** @param {NS} ns \\n *  Run when we can no longer gamble at the casino (presumably because we've been kicked out) **/\\nfunction onCompletion(ns) {\\n    ns.write(ran_flag, \\\"True\\\", \\\"w\\\"); // Write an file indicating we think we've been kicked out of the casino.\\n    log(ns, \\\"SUCCESS: We've been kicked out of the casino.\\\", true);\\n\\n    // Run the completion script before shutting down    \\n    let completionScript = options['on-completion-script'];\\n    if (!completionScript) return;\\n    let completionArgs = options['on-completion-script-args'];\\n    if (ns.run(completionScript, 1, ...completionArgs))\\n        log(ns, `INFO: casino.js shutting down and launching ${completionScript}...`, false, 'info');\\n    else\\n        log(ns, `WARNING: casino.js shutting down, but failed to launch ${completionScript}...`, false, 'warning');\\n}\\n\\n// Some DOM helpers (partial credit to @ShamesBond)\\nasync function click(elem) {\\n    await elem[Object.keys(elem)[1]].onClick({ isTrusted: true });\\n    if (options['click-sleep-time']) await _ns.sleep(options['click-sleep-time']);\\n}\\nasync function setText(input, text) {\\n    await input[Object.keys(input)[1]].onChange({ isTrusted: true, target: { value: text } });\\n    if (options['click-sleep-time']) await _ns.sleep(options['click-sleep-time']);\\n}\\nfunction find(xpath) { return doc.evaluate(xpath, doc, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue; }\\nasync function findRetry(ns, xpath, expectFailure = false, retries = null) {\\n    try {\\n        return await autoRetry(ns, () => find(xpath), e => e !== undefined,\\n            () => expectFailure ? `It's looking like the element with xpath: ${xpath} isn't present...` :\\n                `Could not find the element with xpath: ${xpath}\\\\nSomething may have re-routed the UI`,\\n            retries != null ? retries : expectFailure ? 3 : 10, 1, 2);\\n    } catch (e) {\\n        if (!expectFailure) throw e;\\n    }\\n}\\n\\n// Better logic for when to HIT / STAY (Partial credit @drider)\\nfunction shouldHitAdvanced(ns, playerCountElem) {\\n    const txtPlayerCount = playerCountElem.textContent.substring(7);\\n    const player = parseInt(txtPlayerCount.match(/\\\\d+/).shift());\\n    const dealer = getDealerCount();\\n    if (options['enable-logging']) log(ns, `Player Count Text: ${txtPlayerCount}, Player: ${player}, Dealer: ${dealer}`);\\n    // Strategy to minimize house-edge. See https://wizardofodds.com/blackjack/images/bj_4d_s17.gif\\n    if (txtPlayerCount.includes(\\\"or\\\")) { // Player has an Ace\\n        if (player >= 9) return false; // Stay on Soft 19 or higher\\n        if (player == 8 && dealer <= 8) return false; // Soft 18 - Stay if dealer has 8 or less\\n        return true; // Otherwise, hit on Soft 17 or less\\n    }\\n    if (player >= 17) return false; // Stay on Hard 17 or higher\\n    if (player >= 13 && dealer <= 6) return false; // Stay if player has 13-16 and dealer shows 6 or less.\\n    if (player == 12 && 4 <= dealer && dealer <= 6) return false; // Stay if player has 12 and dealer has 4 to 6\\t\\n    return true;// Otherwise Hit\\n}\\nfunction getDealerCount() {\\n    const text = find(\\\"//p[contains(text(), 'Dealer')]/..\\\").innerText.substring(8, 9);\\n    let cardValue = parseInt(text);\\n    return isNaN(cardValue) ? (text == 'A' ? 11 : 10) : cardValue;\\n}\",\"filename\":\"casino.js\",\"server\":\"home\"}}],[\"Temp/-859142593-data.txt.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { let r;try{r=JSON.stringify(\\n    ns.singularity.travelToCity(ns.args[0])\\n);}catch(e){r=\\\"ERROR: \\\"+(typeof e=='string'?e:e.message||JSON.stringify(e));}\\nconst f=\\\"/Temp/-859142593-data.txt\\\"; if(ns.read(f)!==r) ns.write(f,r,'w') }\",\"filename\":\"Temp/-859142593-data.txt.js\",\"server\":\"home\"}}],[\"modul.spider.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { settings, timeStamp } from \\\"./lib.helpers.js\\\";\\n\\n/** \\n * dieses script soll idealerweise alle verfügbaren server finden und in den **\\\"settings\\\"** merken\\n * @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst options = ns.flags([\\n\\t\\t['botnetName', settings.botnetName],\\t// default botnetName\\n\\t\\t['help', false],\\t\\t\\t// a default boolean means this flag is a boolean\\n\\t\\t['nextScript', undefined]\\n\\t]);\\n\\tif (options.help) {\\n\\t\\tlet info = \\\"INFO: dieses script erfasst die server die sich als Bots eignen und sammelt daten über sie\\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\t// wirklicher start ***************************************************************\\n\\tns.tprint(`[${timeStamp()}] Starte Skript '${ns.getScriptName()}'`)\\n\\n\\t// Plan:: erstmal feststellen wieviele Cracks zur verfügung stehen, wichtig um\\n\\t// später auszusortieren ob der Server als Bot benutzt werden kann \\n\\tconst cracks = new Map([  // alle cracks im spiel\\n\\t\\t[\\\"BruteSSH.exe\\\", ns.brutessh],\\n\\t\\t[\\\"FTPCrack.exe\\\", ns.ftpcrack],\\n\\t\\t[\\\"relaySMTP.exe\\\", ns.relaysmtp],\\n\\t\\t[\\\"HTTPWorm.exe\\\", ns.httpworm],\\n\\t\\t[\\\"SQLInject.exe\\\", ns.sqlinject]]);\\n\\tlet numCracks = 0;\\t\\t// verfügbare (erspielte) cracks\\n\\tfor (let crack of cracks) {\\n\\t\\tif (ns.fileExists(crack[0], 'home')) numCracks++;\\n\\t}\\n\\n\\t// Plan:: dann alle server durchgehen und bots rekrutieren und daten über sie sammeln\\n\\tconst botNet = { bots: {}, lastUpdate: new Date().getTime() }\\n\\t{\\n\\t\\tlet visited = [];\\n\\t\\tlet speicher = new Map().set('home', []);\\n\\n\\t\\t//solange noch was im speicher liegt\\n\\t\\twhile (speicher.size > 0) {\\n\\t\\t\\t// ermittle das erste element im speicher\\n\\t\\t\\tlet [node] = speicher.keys();\\n\\t\\t\\tlet [parent] = speicher.values();\\n\\t\\t\\t// entferne das element aus dem Speicher\\n\\t\\t\\tspeicher.delete(node);\\n\\n\\t\\t\\t//prüfe ob wir es noch NICHT angeschaut haben\\n\\t\\t\\tif (!visited.includes(node)) {\\n\\t\\t\\t\\t//wenn ja, merke es als angeschaut\\n\\t\\t\\t\\tvisited.push(node);\\n\\t\\t\\t\\t// und alle nachbarn in den speicher legen\\n\\t\\t\\t\\tlet children = ns.scan(node);\\n\\t\\t\\t\\tif (children[0] === parent) { children.shift(); } // aber parent-teil auslassen\\n\\t\\t\\t\\tfor (let child of children) {\\n\\t\\t\\t\\t\\tspeicher.set(child, node);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// prüfe ab wir Node zum hacken nutzen können\\n\\t\\t\\t\\t// kriterien:\\n\\t\\t\\t\\t// - wir können die notwendigen ports öffnen um nuke.exe zu starten\\n\\t\\t\\t\\t// - home ausschließen\\n\\t\\t\\t\\tif (numCracks >= ns.getServerNumPortsRequired(node) && node !== \\\"home\\\") {\\n\\t\\t\\t\\t\\t// prüfe auch ob wir schon rootRechte haben\\n\\t\\t\\t\\t\\tif (!ns.hasRootAccess(node)) {\\n\\t\\t\\t\\t\\t\\t// wenn nicht, gehe unsere cracks duch und führe sie aus\\n\\t\\t\\t\\t\\t\\tfor (let crack of cracks) {\\n\\t\\t\\t\\t\\t\\t\\tif (ns.fileExists(crack[0], 'home')) {\\n\\t\\t\\t\\t\\t\\t\\t\\tcrack[1](node);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t// anschliesend führe NUKE aus\\n\\t\\t\\t\\t\\t\\tns.nuke(node);\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// sicherheitshalber die Scripte kopieren (überschreibt die alten)\\n\\t\\t\\t\\t\\tawait ns.scp([\\\"bin.grow.js\\\", \\\"bin.hack.js\\\", \\\"bin.weak.js\\\"], node, \\\"home\\\");\\n\\n\\t\\t\\t\\t\\t// !!noch ein paar mehr daten sammeln?\\n\\t\\t\\t\\t\\tlet needGrows = ns.getServerMaxMoney(node) !== ns.getServerMoneyAvailable(node);\\n\\t\\t\\t\\t\\tlet growCount = (ns.getServerMaxMoney(node) === ns.getServerMoneyAvailable(node)) ? 0 : Math.ceil(ns.growthAnalyze(node, ns.getServerMaxMoney(node) / ns.getServerMoneyAvailable(node)) * 100) / 100;\\n\\t\\t\\t\\t\\tlet weakCount = Math.ceil((ns.getServerSecurityLevel(node) - ns.getServerMinSecurityLevel(node)) * 20 * 100) / 100;\\n\\t\\t\\t\\t\\tlet needWeakens = weakCount > 0;\\n\\t\\t\\t\\t\\tlet isReady = !needGrows && !needWeakens;\\n\\n\\t\\t\\t\\t\\t// und dann in unserem botnet aufnehmen\\n\\t\\t\\t\\t\\tbotNet.bots[node] = {\\n\\t\\t\\t\\t\\t\\tname: node,\\n\\t\\t\\t\\t\\t\\tports: ns.getServerNumPortsRequired(node),\\n\\t\\t\\t\\t\\t\\thackingLevel: ns.getServerRequiredHackingLevel(node),\\n\\t\\t\\t\\t\\t\\tmaxMoney: ns.getServerMaxMoney(node),\\n\\t\\t\\t\\t\\t\\tgrowth: ns.getServerGrowth(node),\\n\\t\\t\\t\\t\\t\\tgrowCount: growCount,\\n\\t\\t\\t\\t\\t\\tweakCount: weakCount,\\n\\t\\t\\t\\t\\t\\tisReady: isReady,\\n\\t\\t\\t\\t\\t\\tneedGrows: needGrows,\\n\\t\\t\\t\\t\\t\\tneedWeakens: needWeakens,\\n\\t\\t\\t\\t\\t\\tminSecurityLevel: ns.getServerMinSecurityLevel(node),\\n\\t\\t\\t\\t\\t\\tbaseSecurityLevel: ns.getServerBaseSecurityLevel(node),\\n\\t\\t\\t\\t\\t\\tmaxRam: ns.getServerMaxRam(node),\\n\\t\\t\\t\\t\\t\\tfiles: ns.ls(node),\\n\\t\\t\\t\\t\\t\\tchildren: children,\\n\\t\\t\\t\\t\\t\\tparent: parent,\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t} // end if (hackable?)\\n\\t\\t\\t}\\n\\t\\t} // end while (spider)\\n\\t}\\n\\t// Plan:: botnet in settings ablegen und ggf. nächstes script starten\\n\\tsettings.setItem(options.botnetName, botNet);\\n\\n\\tif (options._[0]) { options.nextScript = options._[0] }\\n\\tif (options.nextScript || options._[0]) {\\n\\t\\tns.tprint(`[${timeStamp()}] Übergebe an Skript '${options.nextScript}'`)\\n\\t\\tns.spawn(options.nextScript, { threads: 1, spawnDelay: settings.spawnDelay })\\n\\t} else {\\n\\t\\tns.tprint(`[${timeStamp()}] Beende Skript '${ns.getScriptName()}. Stop.'`)\\n\\t}\\n}\\n\\n\\n\",\"filename\":\"modul.spider.js\",\"server\":\"home\"}}],[\"doProcess.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { runCommand } from './lib.helpers.js' //original: https://github.com/alainbryden/bitburner-scripts/blob/main/helpers.js\\n\\nconst escapeChars = ['\\\"', \\\"'\\\", \\\"`\\\"];\\n\\n/** @param {NS} ns \\n * The argument can consist of multiple commands to run. The output of the first command will automatically be printed\\n * unless a subsequent command includes '; output = ...' - in which case that result will be printed instead. **/\\nexport async function main(ns) {\\n    let args = ns.args;\\n    if (args.length == 0)\\n        return ns.tprint(\\\"You must run this script with an argument that is the code to test.\\\")\\n    // Special first argument of -s will result in \\\"silent\\\" mode - do not output the result in the success case\\n    let silent = false;\\n    if (args.includes('-s')) {\\n        silent = true;\\n        args = args.slice(args.indexOf('-s'), 1);\\n    }\\n    const firstArg = String(args[0]);\\n    const escaped = escapeChars.some(c => firstArg.startsWith(c) && firstArg.endsWith(c));\\n    let command = args == escaped ? args[0] : args.join(\\\" \\\"); // If args weren't escaped, join them together\\n    // To avoid confusion, strip out any trailing spaces / semicolons\\n    command = command.trim();\\n    if (command.endsWith(';')) command = command.slice(0, -1);\\n    // If the command appears to contian multiple statements, cleverly (and perhaps perilously)\\n    // see if we can inject a return statement so that we can get the return value of the last statement\\n    if (command.includes(';')) {\\n        const lastStatement = command.lastIndexOf(';');\\n        if (!command.slice(lastStatement + 1).trim().startsWith('return'))\\n            command = command.slice(0, lastStatement + 1) + `return ` + command.slice(lastStatement + 1);\\n        // Create a scope around multi-statement commands so they can be used in a lambda\\n        command = `{ ${command} }`;\\n    }\\n    // Wrapping the command in a lambda that can capture and print its output.\\n    command = `ns.tprint(JSON.stringify(await (async () => ${command})() ?? \\\"(no output)\\\", null, 2))`;\\n    await ns.write(`/Temp/terminal-command.js`, \\\"\\\", \\\"w\\\"); // Clear the previous command file to avoid a warning about re-using temp script names. This is the one exception.\\n    return await runCommand(ns, command, `/Temp/terminal-command.js`, (escaped ? args.slice(1) : undefined), !silent);\\n}\",\"filename\":\"doProcess.js\",\"server\":\"home\"}}],[\"Temp/terminal-command.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) { ns.tprint(JSON.stringify(await (async () => let s=ns.getServer('foodnstuff' ))() ?? \\\"(no output)\\\", null, 2)) }\",\"filename\":\"Temp/terminal-command.js\",\"server\":\"home\"}}],[\"formelTest.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { calculateGrowThreads, calculateGrowGain } from \\\"./basis.js\\\";\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet opts1 = {\\n\\t\\tmoneyAvailable: ns.getServerMoneyAvailable('n00dles'), //ns.getServerMoneyAvailable(host)\\n\\t\\tServerGrowthRate: 1,\\n\\t\\thackDifficulty: ns.getServerSecurityLevel('n00dles'),\\n\\t\\tmoneyGain: 1750000 - 70000,\\n\\t}\\n\\n\\tns.tprint(\\\"T: \\\" + calculateGrowThreads(ns, 'n00dles', opts1.moneyGain, 1, opts1))\\n\\tns.tprint(\\\"%: \\\" + calculateGrowGain(ns, 'n00dles', 1, 1, opts1))\\n\\n\\tawait ns.sleep(100);\\n\\tlet opts2 = {\\n\\t\\tmoneyAvailable: ns.getServerMoneyAvailable('foodnstuff'), //ns.getServerMoneyAvailable(host)\\n\\t\\tServerGrowthRate: 1,\\n\\t\\thackDifficulty: ns.getServerSecurityLevel('foodnstuff'),\\n\\t\\tmoneyGain: 50000000 - 2000000,\\n\\t}\\n\\n\\tns.tprint(\\\"T: \\\" + calculateGrowThreads(ns, 'foodnstuff', opts2.moneyGain, 1, opts2))\\n\\tns.tprint(\\\"%: \\\" + calculateGrowGain(ns, 'foodnstuff', 1, 1, opts2))\\n\\n\\t/** export function calculateGrowThreads(ns, host, gain, cores = 1, opts = {}) { \\n\\t *         function growPercent(ns, host, threads = 1, cores = 1, opts = {}) {\\n\\t * \\n\\t*/\\n\\n}\",\"filename\":\"formelTest.js\",\"server\":\"home\"}}],[\"testHackAlg.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = 'n00dles';\\n\\tlet hackValue = ns.hackAnalyze(target) * 1750000;\\n\\n\\tlet hackThreads = 43;\\n\\tlet growThreads = ns.growthAnalyze(target, 1750000 / (1750000 - (hackValue * hackThreads * 3)));\\n\\tlet weakThreads = ns.hackAnalyzeSecurity(hackThreads * 3, target) + ns.growthAnalyzeSecurity(growThreads, target);\\n\\tweakThreads *= 20;\\n\\n\\tns.tprint(` HT: ${hackThreads} GT: ${growThreads} WT: ${weakThreads} Sum: ${Math.ceil(hackThreads) + Math.ceil(growThreads) + Math.ceil(weakThreads)}`);\\n\\tns.tprint(` Money ${hackValue * hackThreads * 3} `);\\n\\n\\n\\n\\t//ns.tprint(`  ${} `);\\n\\t\\n}\",\"filename\":\"testHackAlg.js\",\"server\":\"home\"}}],[\"setSomething.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { settings, timeStamp } from \\\"./lib.helpers.js\\\";\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tsettings.setItem('target', 'foodnstuff'  );\\n\\n}\",\"filename\":\"setSomething.js\",\"server\":\"home\"}}],[\"buttons.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { autoRetry } from './orig.lib.helpers.js'\\n\\nlet options = [\\n\\t['save-sleep-time', 10], // Time to sleep in milliseconds after saving. If you are having trouble with your automatic saves not \\\"taking effect\\\" try increasing this.\\n\\t['click-sleep-time', 1], // Time to sleep in milliseconds after clicking any button (or setting text). Increase if your are getting errors on click.\\n\\t['use-basic-strategy', false], // Set to true to use the basic strategy (Stay on 17+)\\n\\t['enable-logging', false], // Set to true to pop up a tail window and generate logs.\\n\\t['kill-all-scripts', false], // Set to true to kill all running scripts before running.\\n\\t['no-deleting-remote-files', false], // By default, if --kill-all-scripts, we will also remove remote files to speed up save/reload\\n\\t['on-completion-script', null], // Spawn this script when max-charges is reached\\n\\t['on-completion-script-args', []], // Optional args to pass to the script when launched\\n];\\n\\nconst doc = globalThis[\\\"document\\\"];\\n\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst btnCity =  await findRetry(ns, \\\"//div[@role = 'button' and //p[text()='City']]\\\");\\n\\t// //div[@role = 'button'[div/p[text()='City']]]\\n\\tawait click(btnCity);\\n\\n}\\n\\n// Some DOM helpers (partial credit to @ShamesBond)\\nasync function click(elem) {\\n\\tawait elem[Object.keys(elem)[1]].onClick({ isTrusted: true });\\n\\tif (options['click-sleep-time']) await _ns.sleep(options['click-sleep-time']);\\n}\\nasync function setText(input, text) {\\n\\tawait input[Object.keys(input)[1]].onChange({ isTrusted: true, target: { value: text } });\\n\\tif (options['click-sleep-time']) await _ns.sleep(options['click-sleep-time']);\\n}\\nfunction find(xpath) {\\n\\treturn doc.evaluate(xpath, doc, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;\\n}\\nasync function findRetry(ns, xpath, expectFailure = false, retries = null) {\\n\\ttry {\\n\\t\\treturn await autoRetry(ns, () => find(xpath), e => e !== undefined,\\n\\t\\t\\t() => expectFailure ? `It's looking like the element with xpath: ${xpath} isn't present...` :\\n\\t\\t\\t\\t`Could not find the element with xpath: ${xpath}\\\\nSomething may have re-routed the UI`,\\n\\t\\t\\tretries != null ? retries : expectFailure ? 3 : 10, 1, 2);\\n\\t} catch (e) {\\n\\t\\tif (!expectFailure) throw e;\\n\\t}\\n}\\n\",\"filename\":\"buttons.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[[\"Temp/-859142593-data.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/-859142593-data.txt\",\"text\":\"ERROR: API ACCESS ERROR\\nTemp/-859142593-data.txt.js@home (PID - 2)\\n\\nsingularity.travelToCity: This singularity function requires Source-File 4 to run. A power up you obtain later in the game.\\n      It will be very obvious when and how you can obtain it.\\n\\nStack:\\nTemp/-859142593-data.txt.js:L2@Module.main\"}}],[\"Temp/ran-casino.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"Temp/ran-casino.txt\",\"text\":\"True\"}}]]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"mon.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":89136.60999926392,\"ramUsage\":4.15,\"server\":\"home\",\"scriptKey\":\"mon.js*[\\\"n00dles\\\"]\",\"title\":\"mon.js n00dles\",\"threads\":1,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-632212.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[42,50,16,22,33,42,36,27,16,14,17,14,17,34,37],[4,13,46,25,29,25,29,50,50,48,44,39,21,33,46],[33,4,9,37,27,46,11,47,5,26,44,17,35,39,23],[5,4,32,22,10,27,29,11,22,6,29,18,34,34,6],[46,20,2,7,28,13,22,8,19,50,14,21,33,5,17],[4,24,38,9,39,36,25,34,28,17,14,43,11,24,35],[22,46,15,16,46,37,12,7,15,30,11,35,48,37,48]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"84.1.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"ecorp\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"ecorp\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"ecorp\"}}]]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":42775828977,\"moneyMax\":1069395724425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1248,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-790426.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"33183228134\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"22.9.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"megacorp\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"megacorp\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"megacorp\"}}]]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":44990600780,\"moneyMax\":1124765019500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1247,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"31.2.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"b-and-a\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"b-and-a\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"b-and-a\"}}]]},\"serversOnNetwork\":[\"omnitek\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":25024321737,\"moneyMax\":625608043425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1096,\"serverGrowth\":73,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"19.9.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"blade\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"blade\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"blade\"}}]]},\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":28496477570,\"moneyMax\":712411939250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":964,\"serverGrowth\":74,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-634074.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-7,-8,1,10,7,-4,1,-4,-9,6,-7,-8,-9,-8,3,9,-5,-6],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"60.8.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"nwo\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"nwo\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"nwo\"}}]]},\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":23548592747,\"moneyMax\":588714818675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1145,\"serverGrowth\":65,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-768883.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"00110011\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-911779.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[0,4,4,-6,-1,5,2,2,-4,5,-4,4,-7,4,6,4,-9,-1,3,-3,-9,-4,-5,10,1,7,0,-10,-7,10,-1,0,4,-1,2,-4,3,2],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"74.7.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"clarkinc\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"clarkinc\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"clarkinc\"}}]]},\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":24417963361,\"moneyMax\":610449084025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1008,\"serverGrowth\":73,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-621009.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"jjjjjjjjjjzzzzzzzzzzzzznnssb3333333fuAITTTTTTTT66mm666666GWWyynddm666iiM0b6000000I55mmkkk\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-97140.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[11,[[1,7],[1,3],[1,10],[1,5],[2,9],[0,8],[0,6],[4,10],[3,8],[7,9],[6,10],[5,6],[5,8],[3,9],[5,9],[2,8]]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-814431.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":276694605,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"14.8.6.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"omnitek\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"omnitek\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"omnitek\"}}]]},\"serversOnNetwork\":[\"stormtech\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":18654321488,\"moneyMax\":466358037200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1048,\"serverGrowth\":98,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-496271.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"YoSL5618mNOsRrI0VDGDmItMu6RBVItMu4GGEmXmXmXmXmXmWJCLAy\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-54807.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[123,[1,2,4,5,6,7,8,11]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-38494.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"CLOUDQUEUETABLESHIFTEMAIL\",\"BOOKMARK\"],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"93.1.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"4sigma\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"4sigma\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"4sigma\"}}]]},\"serversOnNetwork\":[\"fulcrumtech\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":21764233506,\"moneyMax\":544105837650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":913,\"serverGrowth\":89,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-373963.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[1,10],[3,6],[10,20],[1,9],[18,20],[19,27],[8,9],[18,23],[19,20],[25,33],[2,9],[18,28],[23,26]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"61.2.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"kuai-gong\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"kuai-gong\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"kuai-gong\"}}]]},\"serversOnNetwork\":[\"vitalife\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":28671188878,\"moneyMax\":716779721950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1289,\"serverGrowth\":92,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-295659.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1100000010011000011100001110010000011000010100101100010001101110\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-919089.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"912721655\",-37],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-609682.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[13,[[1,2],[11,12],[5,8],[10,11],[0,2],[3,12],[0,12],[6,9],[2,3],[6,8],[4,7],[2,5],[3,10],[1,9],[6,7],[0,7],[0,8],[1,8],[3,9],[2,4],[3,7],[0,2],[5,10],[6,12]]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"40.8.2.2\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"fulcrumtech\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"fulcrumtech\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"fulcrumtech\"}}]]},\"serversOnNetwork\":[\"titan-labs\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1523733365,\"moneyMax\":38093334125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1077,\"serverGrowth\":93,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-306806.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"3574215244\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"37.7.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"fulcrumassets\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"fulcrumassets\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"fulcrumassets\"}}]]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1463,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-22617.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":45,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"42.6.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"stormtech\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"stormtech\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"stormtech\"}}]]},\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1080079534,\"moneyMax\":27001988350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":900,\"serverGrowth\":92,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-45311.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[12,5],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-663957.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,1,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,1,0,0,0],[0,0,1,0,0,0,0,1,1,0,1],[1,0,0,1,1,0,0,0,0,0,0],[1,0,1,1,1,1,0,0,0,1,1],[1,0,1,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"55.2.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"defcomm\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"defcomm\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"defcomm\"}}]]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":801783720,\"moneyMax\":20044593000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1019,\"serverGrowth\":63,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-963093.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":629803650,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"34.5.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"infocomm\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"infocomm\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"infocomm\"}}]]},\"serversOnNetwork\":[\"zeus-med\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":877678174,\"moneyMax\":21941954350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":906,\"serverGrowth\":53,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-64453.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"19620483114\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-519523.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[189,[1,4,6,7,9,12,15,18]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"56.9.1.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"helios\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"helios\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"helios\"}}]]},\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":621233619,\"moneyMax\":15530840475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":820,\"serverGrowth\":74,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"66.3.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"vitalife\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"vitalife\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"vitalife\"}}]]},\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":794041770,\"moneyMax\":19851044250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":888,\"serverGrowth\":62,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-652818.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[11,24,4,34,29,8,22,46,2,50],[43,4,38,39,33,5,11,29,23,46],[49,33,26,32,44,15,34,28,42,11],[11,39,27,31,40,11,28,21,4,48],[29,44,46,34,16,2,32,44,14,31],[3,31,19,26,39,29,15,6,8,15],[27,48,6,12,49,26,34,44,28,24]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"39.5.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"icarus\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"icarus\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"icarus\"}}]]},\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":946849092,\"moneyMax\":23671227300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":876,\"serverGrowth\":87,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-621112.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9z6Ne41HFj08GqqaGxR1386IA6HE5928xmqBUqqB5968L7bI7870423Shd249K6lEVgivg76\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"79.5.1.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"univ-energy\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"univ-energy\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"univ-energy\"}}]]},\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1199755867,\"moneyMax\":29993896675,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":820,\"serverGrowth\":87,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-300768.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":32807990486,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-580884.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1111000110001110\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-259503.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[28,122,92,196,124,45,122,75,72,3,90,35,26,81,63,147,143,90,40,133,18,128,136,72,163,154,86,35,107,126,131,43,55,94],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"73.4.0.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"titan-labs\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"titan-labs\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"titan-labs\"}}]]},\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":804664300,\"moneyMax\":20116607500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":852,\"serverGrowth\":77,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-969280.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"MODEM TRASH DEBUG QUEUE INBOX\",1],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"56.9.7.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"microdyne\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"microdyne\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"microdyne\"}}]]},\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":600500452,\"moneyMax\":15012511300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":827,\"serverGrowth\":70,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-418103.cct\",\"type\":\"Total Ways to Sum\",\"data\":80,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"1.8.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"taiyang-digital\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"taiyang-digital\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"taiyang-digital\"}}]]},\"serversOnNetwork\":[\"zeus-med\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":873064686,\"moneyMax\":21826617150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":73,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"48.7.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"galactic-cyber\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"galactic-cyber\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"galactic-cyber\"}}]]},\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":782066149,\"moneyMax\":19551653725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":838,\"serverGrowth\":78,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-270524.cct\",\"type\":\"Total Ways to Sum\",\"data\":97,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"43.7.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"aerocorp\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"aerocorp\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"aerocorp\"}}]]},\"serversOnNetwork\":[\"aevum-police\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1068181748,\"moneyMax\":26704543700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":901,\"serverGrowth\":64,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"26.2.0.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"omnia\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"omnia\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"omnia\"}}]]},\"serversOnNetwork\":[\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":969335598,\"moneyMax\":24233389950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":916,\"serverGrowth\":63,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-442132.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1381787835\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"32.8.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"zb-def\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"zb-def\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"zb-def\"}}]]},\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":902139182,\"moneyMax\":22553479550,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":818,\"serverGrowth\":65,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"4.5.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"applied-energetics\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"applied-energetics\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"applied-energetics\"}}]]},\"serversOnNetwork\":[\"infocomm\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":774114135,\"moneyMax\":19352853375,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":817,\"serverGrowth\":73,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"19.1.0.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"solaris\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"solaris\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"solaris\"}}]]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":861584310,\"moneyMax\":21539607750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":818,\"serverGrowth\":79,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-181164.cct\",\"type\":\"Array Jumping Game\",\"data\":[9,7,8,8,7,0,0,9,0,0,5,0,10,9,8,1,7],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-806018.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"MOUSE DEBUG QUEUE CACHE PASTE\",19],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-155820.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"MACRO MODEM TABLE CLOUD POPUP\",21],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-552277.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[40,[1,3,5,6,7,8,9,10,14,15]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"8.7.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"deltaone\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"deltaone\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"deltaone\"}}]]},\"serversOnNetwork\":[\"aerocorp\",\"icarus\",\"univ-energy\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1670527521,\"moneyMax\":41763188025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":866,\"serverGrowth\":65,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-871623.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"Ehwqw4bbDhwH43wH43wH43I3I3I3I3I33I33I33Ib0Ib0Ib0Ibb0Ib8lqFH2q4cb0H2q408LtsXZLtttttttttcqiOfA6q\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"89.4.5.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"global-pharm\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"global-pharm\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"global-pharm\"}}]]},\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1618237527,\"moneyMax\":40455938175,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":797,\"serverGrowth\":87,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-918651.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[39,126,67,161,151,188,150,81,143,89,167,102,60,35,15,102,77,73,155,17,69,22,72,108,156,71,185,18,3,137,185,135,61,175,24,193,160,191,90,149,132,157,184],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"73.3.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"nova-med\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"nova-med\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"nova-med\"}}]]},\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1187907546,\"moneyMax\":29697688650,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":843,\"serverGrowth\":75,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"35.6.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"zeus-med\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"zeus-med\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"zeus-med\"}}]]},\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1475843125,\"moneyMax\":36896078125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":826,\"serverGrowth\":70,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-496462.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":218583526,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-803822.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[14,[[2,8],[9,11],[2,13],[6,8],[1,9],[5,9],[3,10],[3,4],[4,11],[6,10],[1,8],[3,7],[3,12],[1,13],[0,9],[8,11],[6,10],[2,4]]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-570044.cct\",\"type\":\"Array Jumping Game\",\"data\":[5,10,2,4,9,9],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"35.0.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"unitalife\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"unitalife\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"unitalife\"}}]]},\"serversOnNetwork\":[\"aerocorp\",\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1061663282,\"moneyMax\":26541582050,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":785,\"serverGrowth\":77,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-970977.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,1],[0,0,0,0,0,1,0],[0,0,0,0,1,1,0],[0,0,1,0,0,0,0],[0,0,0,0,0,0,0],[1,0,0,0,0,0,0],[0,1,1,0,0,0,0],[0,0,0,0,1,0,1],[0,0,0,0,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"44.8.4.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"lexo-corp\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"lexo-corp\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"lexo-corp\"}}]]},\"serversOnNetwork\":[\"syscore\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":718415167,\"moneyMax\":17960379175,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":725,\"serverGrowth\":58,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-453733.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"TABLEFLASHLINUXQUEUECLOUD\",\"GIGABYTE\"],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"77.3.8.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"rho-construction\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"rho-construction\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"catalyst\",\"galactic-cyber\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":649079939,\"moneyMax\":16226998475,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":477,\"serverGrowth\":44,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-166143.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":862466578,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-616908.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"PASTECACHEPOPUPEMAILSHIFT\",\"EMOTICON\"],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-974498.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"CLOUD DEBUG ENTER EMAIL PRINT\",23],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"16.4.0.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"alpha-ent\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"alpha-ent\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":625709876,\"moneyMax\":15642746900,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":534,\"serverGrowth\":56,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-27609.cct\",\"type\":\"Array Jumping Game\",\"data\":[10,3,0,6,3,0,6,10,0,8,5,5],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-939208.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[1,3],[5,7],[10,20],[2,5],[18,19],[2,6],[3,11]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"18.2.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"aevum-police\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"aevum-police\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"syscore\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":319114268,\"moneyMax\":7977856700,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":422,\"serverGrowth\":46,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-435019.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[75,91,13,33,11,152,112,46,91,115,74,182,63,191,123,68,162,71,68,80,140,71,124,25,89,39,45,2,17,16,102,55,82,122,35,89,51,195,36,103,13,157,116],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-741326.cct\",\"type\":\"Total Ways to Sum\",\"data\":59,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-863883.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[113,[1,4,7,8,10,14,17,18,19]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"81.4.3.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"rothman-uni\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"rothman-uni\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":224960806,\"moneyMax\":5624020150,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":397,\"serverGrowth\":43,\"runningScripts\":[]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-785513.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":29755235,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-895902.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[21,3,120,150,161,198,54,133,47,78,142,174,21,101,46,81,58,87,89,191,152,181,92],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-577294.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[8,6],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"52.2.2.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"zb-institute\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"zb-institute\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"zb-institute\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":899162037,\"moneyMax\":22479050925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":733,\"serverGrowth\":83,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-396478.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[46,135,24,162,55,171,113,57,124,41,125,48,120,179,150,34,33,48,49,6,13,131,45,198,81,127,118,31,121,180,137,185,198],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"28.2.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"summit-uni\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"summit-uni\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":244114928,\"moneyMax\":6102873200,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":427,\"serverGrowth\":41,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-336977.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,1,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,1,1,1,1,0,0,1,0],[1,0,0,0,1,1,0,0,0,0,1,0],[0,0,0,1,1,0,0,0,1,0,0,1],[0,0,0,0,0,0,0,1,1,0,0,0],[0,1,0,0,0,1,1,0,0,0,0,0],[0,0,1,0,1,0,1,0,0,0,0,1],[1,0,0,0,0,1,0,0,0,1,0,0],[1,1,1,0,0,1,1,0,0,0,0,0]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-230396.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[59,[1,2,6,7,8,9,11,12]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-551172.cct\",\"type\":\"Array Jumping Game\",\"data\":[1,6,4,0,10,5,2,6,4,6,0,2,7,10,0,7,9,3],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"50.9.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"syscore\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"syscore\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"syscore\"}}]]},\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":592494893,\"moneyMax\":14812372325,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":576,\"serverGrowth\":65,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"42.6.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"catalyst\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"catalyst\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"computek\",\"rho-construction\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":531797477,\"moneyMax\":13294936925,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":423,\"serverGrowth\":42,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"54.6.4.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"the-hub\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"the-hub\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":166322435,\"moneyMax\":4158060875,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":297,\"serverGrowth\":45,\"runningScripts\":[]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-966052.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[63,125,156,165,45,168,160,123,98,126,151,78,72,144,79,172,76,184,11,195,97,8,132,70,37,56,1,92,108,105,124,15,161,4,195,4],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-147817.cct\",\"type\":\"Total Ways to Sum\",\"data\":37,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-450790.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1451885821\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"93.4.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"computek\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"computek\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"computek\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":230946763,\"moneyMax\":5773669075,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":373,\"serverGrowth\":46,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-794485.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[40,25,36,28,38,11,20,4,27,36,40,30,16,31],[49,49,44,39,32,42,6,12,41,46,21,27,4,4],[11,31,45,37,33,49,15,4,43,45,17,29,32,7],[49,7,2,47,26,1,20,1,7,45,39,36,16,30],[45,19,6,7,7,13,16,7,48,36,21,28,47,22],[8,15,39,35,50,27,21,47,11,3,45,21,18,16],[39,26,5,16,7,9,37,43,21,35,24,49,14,1],[49,15,31,46,22,11,2,20,9,34,26,27,17,1],[30,35,22,44,12,1,3,18,2,36,19,37,24,20],[45,3,5,16,20,37,41,2,41,15,50,21,31,8],[7,35,14,41,43,26,31,1,11,14,27,41,47,15],[26,29,28,40,7,29,45,39,23,35,2,26,43,15]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"50.9.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"netlink\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"netlink\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":380,\"serverGrowth\":63,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-386109.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[14,4],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-687494.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1101011100100111\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"88.3.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"johnson-ortho\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"johnson-ortho\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"johnson-ortho\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":77872194,\"moneyMax\":1946804850,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":260,\"serverGrowth\":48,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-997301.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"1962302\",-72],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-721061.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"0CCCCCCllllllllV888888BBNbbo4nn666666LLLLLLLLSSZZZZZZZZZZZZZZHH888WWWWWWWeo4\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"15.4.0.9\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"n00dles\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"n00dles\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.112,\"minDifficulty\":1,\"moneyAvailable\":1388559.5305786338,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-927597.cct\",\"type\":\"Array Jumping Game II\",\"data\":[1,4,1,3,4],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"44.4.0.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"foodnstuff\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"foodnstuff\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":49813759.9884152,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-708874.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9R3lu6v6fU087GpooCZT646TQ84w8642Ly740711h4933LL999A3L6FpzLP11\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"59.4.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"sigma-cosmetics\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"sigma-cosmetics\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"23.4.8.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"joesguns\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"joesguns\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-662562.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[183,[1,2,5,7,8,9,11,12]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"15.1.7.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"zer0\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"zer0\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-161036.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[9,15],[18,26],[19,21],[23,33],[6,14],[11,14],[4,9],[14,23],[22,27],[1,5],[5,15],[8,16]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"71.9.2.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"nectar-net\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"nectar-net\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"neo-net\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-924278.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[10,[[1,9],[2,7],[0,3],[6,8],[5,9],[4,9],[0,2],[1,4],[2,5],[4,5],[6,9],[0,8],[1,2]]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-607658.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,0,0,0,1,0,0],[0,0,1,0,0,0,1,0,1,1,0,0],[1,0,0,1,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,0,1,0,0],[0,1,1,0,0,0,0,0,0,1,0,0],[0,1,1,1,1,0,0,1,0,0,0,0],[0,0,1,0,0,1,1,0,0,0,1,1],[0,1,1,0,0,1,1,0,0,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"21.0.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"neo-net\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"neo-net\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-226415.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[92,137,21,190,132,148,69,17,152,190,115,135,33,74,145,32,79,118,13,193,153,116,95,178,170,53,183,180,173,187,195,9,192,189],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-180592.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"LOGINMOUSEPOPUPMODEMCACHE\",\"PROCESSOR\"],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"93.8.5.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"silver-helix\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"silver-helix\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"netlink\",\"johnson-ortho\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-359531.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"19244245149\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-504225.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"yUMjb6HHllFRHRHRHRHRHRHRHRwP18tHRHRYYGZMv1B6SiD67SiD67SpU61A67faEAnPUkanPUkanPU2\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-16033.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[49,81,120,199,151,92,185,134,169,73,136,126,49,149,109,177,101,181,40,118,40,165,115,160,176,111,169,145,173,13,135,103,24,156,137,126,68,180,107,26,30,72,96,142,102,39,195,13,154,126],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"35.4.9.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"hong-fang-tea\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"hong-fang-tea\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-518820.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[126,84,18,106,153,88,41,46,188,148,109,120,148,3,98,99,196,116,197,98,80,103,62,101,150,69,99,5],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-772359.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,0,1],[0,0,0,0,1,1,0,0,0,0],[1,0,0,0,0,1,0,1,0,0],[0,0,0,0,0,0,0,0,1,0],[1,0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,1],[0,1,0,0,0,1,0,1,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"88.5.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"harakiri-sushi\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"harakiri-sushi\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"52.3.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"phantasy\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"phantasy\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"76.9.8.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"max-hardware\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"max-hardware\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"42.6.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"omega-net\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"omega-net\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":33,\"hackDifficulty\":33,\"minDifficulty\":11,\"moneyAvailable\":69849828,\"moneyMax\":1746245700,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":190,\"serverGrowth\":39,\"runningScripts\":[]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-194496.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[12,[[2,11],[2,9],[3,5],[0,8],[1,10],[2,3],[5,8],[4,5],[1,11],[2,10],[0,7],[5,9],[6,11],[6,8],[1,9],[3,6],[5,7],[0,11]]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"26.6.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"crush-fitness\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"crush-fitness\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"crush-fitness\"}}]]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":39,\"minDifficulty\":13,\"moneyAvailable\":54643207,\"moneyMax\":1366080175,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":236,\"serverGrowth\":28,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-760350.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"01101000100000000101111011100011\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-101267.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[27,31,59,197,28,20,122,94,140,71],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-873947.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"DaxAeAZtq2tq2tq2tq2q5jK2HT8iu2HT8DqrUxKw8Dqr7C6UksQkAUQkAop0z3Qk670z3Qk0k0k0\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-902150.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1391582862\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"28.0.9.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"iron-gym\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"iron-gym\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-244218.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"MOUSECLOUDVIRUSARRAYFLASH\",\"BLOGGER\"],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"12.2.9.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"millenium-fitness\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"millenium-fitness\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":515,\"serverGrowth\":45,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-360974.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"6b6FhHM523n65377qzzzeEY738SexnePVo7990SEn376Vm06lbgxUf979jmWjSmWCl086x3vkevZ\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-170660.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,1,0,0],[0,0,1,0,0,1,0,0,0],[0,0,0,1,0,1,0,1,0],[0,0,0,0,0,1,0,0,1],[0,0,0,1,1,0,0,0,0],[1,0,0,0,0,0,0,0,0],[0,1,1,0,1,0,0,0,0],[1,0,1,0,0,1,0,0,1],[1,0,0,0,0,0,1,0,1],[0,0,0,0,1,0,0,0,0],[0,1,0,0,0,0,1,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"93.5.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"powerhouse-fitness\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"powerhouse-fitness\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"powerhouse-fitness\"}}]]},\"serversOnNetwork\":[\".\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1001,\"serverGrowth\":52,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"86.6.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"snap-fitness\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"snap-fitness\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"snap-fitness\"}}]]},\"serversOnNetwork\":[\"lexo-corp\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":754,\"serverGrowth\":51,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-162523.cct\",\"type\":\"Array Jumping Game II\",\"data\":[6,2,2,1,2],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-401801.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"Zm030JAm0300JAm0300J400J40l4J400J407t81qFxtAzxt1qF3QRAtS6CNB\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-335012.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":258430731,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"6.0.1.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"run4theh111z\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"run4theh111z\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"run4theh111z\"}}]]},\"serversOnNetwork\":[\"taiyang-digital\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":521,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-563042.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[48,[1,3,5,6,7,8,11,12]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"7.4.9.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"I.I.I.I\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"I.I.I.I\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"netlink\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":347,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-966500.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[13,11],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-604956.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,1,0],[1,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,1,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0],[1,0,1,0,1,0,1,0,1],[0,0,0,1,0,0,0,0,0],[0,1,0,0,0,1,1,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"60.6.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"avmnite-02h\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"avmnite-02h\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":217,\"serverGrowth\":1,\"runningScripts\":[]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-917347.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[30,21,26,11,41,45,3,2,32,24,17,22,2,30,19],[20,24,42,18,11,6,16,2,4,9,22,2,7,40,1],[47,19,18,15,23,7,11,6,39,24,16,36,33,34,4],[16,6,24,33,8,15,38,15,38,2,48,44,16,15,47],[34,45,31,45,12,46,36,15,24,13,28,38,6,16,41],[14,27,47,40,37,31,25,42,36,39,11,14,24,23,46],[21,41,42,12,24,48,30,44,48,36,8,6,14,26,17],[41,43,14,8,23,35,26,5,43,17,10,31,31,27,21]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"80.4.1.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\".\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\".\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\".\"}}]]},\"serversOnNetwork\":[\"stormtech\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":524,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"46.6.9.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"CSEC\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"CSEC\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":55,\"serverGrowth\":1,\"runningScripts\":[]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-433261.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[10,[[1,5],[2,6],[4,6],[7,9],[5,6],[1,4],[1,2],[5,8],[3,4],[0,6],[1,9]]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"65.8.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"The-Cave\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"The-Cave\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"The-Cave\"}}]]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"68.2.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-785194.cct\",\"type\":\"Array Jumping Game II\",\"data\":[2,5,1,0,4,2,3],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-857539.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"FRAME DEBUG MEDIA MACRO CLOUD\",13],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"98.1.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"bin.grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.grow.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.grow() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.grow()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tns.print('loops ' + loops)\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: grow on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.grow(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\\n/** @param {NS} ns \\n * Wait until an appointed time and then execute a grow. \\n * https://github.com/alainbryden/bitburner-scripts/blob/main/Remote/grow-target.js\\nexport async function G_main(ns) {\\n\\t//args[0: target, 1: desired start time, 2: expected end, 3: expected duration, 4: description, 5: manipulate stock, 6: loop]\\n\\tconst sleepDuration = ns.args.length > 1 ? ns.args[1] - Date.now() : 0;\\n\\tconst expectedDuration = ns.args.length > 3 ? ns.args[3] : 0;\\n\\tconst manipulateStock = ns.args.length > 5 && ns.args[5] ? true : false;\\n\\tconst loop = ns.args.length > 6 ? ns.args[6] : false;\\n\\tconst cycleTime = expectedDuration / 3.2 * 4;\\n\\tif (sleepDuration > 0)\\n\\t\\tawait ns.sleep(sleepDuration);\\n\\tdo {\\n\\t\\tawait ns.grow(ns.args[0], { stock: manipulateStock });\\n\\t\\tif (loop) await ns.sleep(cycleTime - expectedDuration);\\n\\t} while (loop);\\n}\\n*/\",\"filename\":\"bin.grow.js\",\"server\":\"darkweb\"}}],[\"bin.hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.hack.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.hack() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.hack()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: hack on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.hack(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.hack.js\",\"server\":\"darkweb\"}}],[\"bin.weak.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const argsSchema = [\\n\\t['target', ''],\\n\\t['threads', 1],\\n\\t['loops', 1],\\n\\t['delay', undefined],\\n\\t['help', false],\\n];\\n/* ----------------------------------------------------------------------- *//**\\n * bin.weak.js\\n *\\n * bekommt spielintern einen parameter als string übergeben und führt den befehl\\n * ns.weaken() aus\\n * @todo eingangsparameter prüfen?\\n *\\n * @param {ns} ns\\n * -------------------------------------------------------------------------- */\\nexport async function main(ns) {\\n\\tconst opt = ns.flags(argsSchema);\\n\\tif (opt.help) {\\n\\t\\tlet info = \\\"INFO: Führt den befehl *ns.weaken()* aus. Parameter sind:\\\\n\\\"\\n\\t\\tinfo += \\\" * target: das ziel zum schröpfen\\\\n * loop: wiederholungen (incl. infinity)\\\\n\\\"\\n\\t\\tinfo += \\\" * delay: wenn der angriff verzögert werden soll (nur im ersten loop)\\\\n\\\";\\n\\t\\tinfo += \\\" * threads: anzahl der threads für den befehl \\\";\\n\\t\\tns.tprint(info);\\n\\t\\treturn 0\\n\\t}\\n\\n\\tlet target = opt.target;\\n\\tlet threads = opt.threads;\\n\\tlet loops = opt.loops;\\n\\tlet delay = opt.delay;\\n\\tif (opt._.length > 0) { target = opt._[0] }\\n\\tif (opt._.length > 1) { threads = opt._[1] }\\n\\tif (opt._.length > 2) { loops = opt._[2] }\\n\\tif (opt._.length > 3) { delay = opt._[3] }\\n\\n\\tif (opt._.length === 0 || target === undefined) {\\n\\t\\tns.tprint(\\\"ERROR: es wird mindestebs der erste Parameter für das Ziel benötigt.\\\");\\n\\t\\tns.tprint(info);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\tif (delay && delay > 0) { ns.sleep(delay) }\\n\\twhile (loops > 0) {\\n\\t\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads.`);\\n\\t\\tawait ns.weaken(target, { threads: threads, });\\n\\t\\tloops--;\\n\\t}\\n}\\n\\nexport function autocomplete(data, args) {\\n\\tconst f = data.flags(argsSchema);\\n\\treturn [...data.servers];\\n}\\n\",\"filename\":\"bin.weak.js\",\"server\":\"darkweb\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"favor\":3.5934,\"discovery\":\"known\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"favor\":14.0951,\"discovery\":\"known\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"rumored\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":10.0506,\"discovery\":\"known\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"favor\":8.1197,\"discovery\":\"known\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"favor\":0,\"discovery\":\"unknown\",\"playerReputation\":0}}}","AliasesSave":"{\"do\":\"run doProcess.js\",\"monitor\":\"run mon.js\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"GoTraditionalStyle\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiAddress\":\"localhost\",\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"TailRenderInterval\":1000,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\",\"maplocation\":\"#ffffff\",\"bnlvl0\":\"#ffff00\",\"bnlvl1\":\"#ff0000\",\"bnlvl2\":\"#48d1cc\",\"bnlvl3\":\"#0000ff\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-30,\"y\":105,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoTabSize\":4,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"38","AllGangsSave":"","LastExportBonus":"0","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}","GoSave":"{\"previousGame\":null,\"currentGame\":{\"ai\":\"Netburners\",\"board\":[\".......\",\".......\",\".......\",\".......\",\".......\",\".......\",\".......\"],\"previousBoard\":null,\"previousPlayer\":\"White\",\"cheatCount\":0,\"passCount\":0},\"stats\":{}}"}}